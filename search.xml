<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>「BUAA CO」关于课下设计的说明</title>
    <url>/2023/12/30/CO/About/</url>
    <content><![CDATA[<h3 id="关于课程"><a href="#关于课程" class="headerlink" title="关于课程"></a>关于课程</h3><p>课下设计指北航2023-2024学年上学期的计算机组成课程的实验部分设计，包括Pre到P7的9次课下设计。22级计组取消P8，助教们辛苦了！</p>
<p>由于22级今年的计组没有P8，因此在文章的内容和质量上或许不尽人意。P8的缺失意味着在我的设计中没有过多考虑代码的可综合性，也可能没有做好Bridge的相关规范，更是和FPGA完全不沾边。</p>
<h3 id="关于这个分类"><a href="#关于这个分类" class="headerlink" title="关于这个分类"></a>关于这个分类</h3><p>本人只是一名计组小菜鸡，只是希望自己能够给后来者提供一些建议而已。因此只打算在这个系列里讲一下本人在计组课程中遇到的问题和解决方法。</p>
<h3 id="关于本人设计的不足"><a href="#关于本人设计的不足" class="headerlink" title="关于本人设计的不足"></a>关于本人设计的不足</h3><p>设计文档和代码在<a class="link"   href="https://github.com/Squirrel7ang/BUAA-CO-2023-Aut" >这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。需要着重说明的是，本人的设计有许多不妥善之处，仅供参考。如有未提及到的错误，欢迎指正！</p>
<p>下面是我觉得不妥的地方:</p>
<h4 id="P1"><a href="#P1" class="headerlink" title="P1"></a>P1</h4><ul>
<li>P1-GRF的同步复位&#x2F;异步复位有误，导致我在P3中debug了很久。P1的GRF测试并没有测出同步复位和异步复位的差异。</li>
</ul>
<h4 id="P5"><a href="#P5" class="headerlink" title="P5"></a>P5</h4><p>从P5开始进行流水线CPU的迭代开发。因此P6和P7都继承了P5的问题。毕竟过了P7，因此在正确性上基本不会出现太离谱的问题。但是会存在非常多的效率问题。P5的问题大致有以下几点:</p>
<ol>
<li>D级叫Decode级不是没有原因的，不应该像我一样把控制器ctrl放在F级。这样会使得F级需要同时完成取值和译码操作，大大增加始终周期；同时D级由于不需要进行译码操作，读写几个寄存器不会花费太多时间。因此会降低CPU性能。好处就是F级也有控制信号啦(ˊᗜˋ*)。F级的控制信号使得我在P7中可以在F级完成对RI异常的判断并进行流水。</li>
<li>转发应当从流水寄存器转发，但是在本人的设计中是过了一到两个多路选择器，延长关键路径，降低CPU性能。设计初衷在于将所有值都流水下去，以应对变幻莫测的上机题。事实证明上机题虽然诡异，但基本不会对设计进行大改，因此在可扩展性方面只需要考虑一些正常的指令就行。课上的诡异指令如果直接阻塞住一般不会卡周期数。</li>
<li>没有使用内部转发，而是使用向D级转发进行了替代。起初是因为懒得实现内部转发，因此使用了一个等价的转发进行替代。事实证明正确性确实没问题，但是完全没必要。内部转发确实更好，封装起来真的是舒服多了。</li>
<li>转发模块没有进行$T_{Use}$和$T_{New}$的比较。只要后面的流水级对寄存器数值进行了更新就进行转发。$T_{Use}$和$T_{New}$只用于阻塞的判断。事实证明这也没有什么大问题。</li>
</ol>
<h4 id="P6"><a href="#P6" class="headerlink" title="P6"></a>P6</h4><p>P6进行新增指令，并实现八条和乘除有关的指令。认真读题就几乎没难度。P6的设计问题主要在于增加了一个不必要的<code>MDStall</code>信号，属于是在开发过程中遗留下来的无伤大雅的问题，其效果和Stall信号完全一致。</p>
<h4 id="P7"><a href="#P7" class="headerlink" title="P7"></a>P7</h4><p>P7的问题可多了。</p>
<ol>
<li>要对异常优先级进行判断。但是由于我F级有控制信号，当我没有进行异常优先级判断的时候也可以得到正确的异常。</li>
<li>分布式和集中式译码杂糅在一块了。主要是在M级进行了大量的分布式译码使得整体结构相当混乱，只能说正确性没问题。</li>
<li>进入核心态时除F级以外全部流水线PC置<code>32&#39;h0000_3000</code>，使得宏观PC鬼畜。但是由于此时已经进入核心态，不会响应异常中断，因此可以保障正确性。</li>
</ol>
<p>最后祝大家计组上机顺利！</p>
]]></content>
      <categories>
        <category>CO</category>
      </categories>
      <tags>
        <tag>CO</tag>
      </tags>
  </entry>
  <entry>
    <title>「BUAA CO」P0总结</title>
    <url>/2024/02/01/CO/P0/</url>
    <content><![CDATA[<h2 id="关于P0"><a href="#关于P0" class="headerlink" title="关于P0"></a>关于P0</h2><p>P0的主要任务时利用Logisim搭建有限状态机。当然也存在非有限状态机的任务，比如GRF，但是上机题目大多是有限状态机。关于Pre到P2的题目可以参考fysszlr的博客<a class="link"   href="https://www.fysszlr.top/categories/%E7%BB%8F%E9%AA%8C/" >\lrgg!&#x2F; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。22级P0挂了也不影响进度，P1和P2同理，只要课下补交过了就行。</p>
<h2 id="个人建议"><a href="#个人建议" class="headerlink" title="个人建议"></a>个人建议</h2><h3 id="关于有限状态机"><a href="#关于有限状态机" class="headerlink" title="关于有限状态机"></a>关于有限状态机</h3><p>教程中对用Logisim搭建有限状态机进行了详细的说明，在此不多赘述。如果不熟悉，请务必复习一下。</p>
<p>个人认为Moore型机和Mealy型机的区别有俩：</p>
<ol>
<li>一般来说Moore机所需要的状态参数会比Mealy机要多。</li>
<li>一般来说Moore机和Mealy机的输出时间会有差别，这是因为Moore机在输入信号发生改变时，需要等到时钟上升沿才能输出，但是Mealy级却可以在输入信号改变的沿改变输出。</li>
</ol>
<p>因此当题目明确说明了要搭建Moore机或者Mealy机的时候，一定要按照题目说的来做。</p>
<h3 id="关于同步-异步复位"><a href="#关于同步-异步复位" class="headerlink" title="关于同步&#x2F;异步复位"></a>关于同步&#x2F;异步复位</h3><p>同步复位在时钟上升沿检测复位信号，如果有效则进行复位；异步复位在复位信号有效时均进行复位，不论时钟如何变化。复位信号一般将寄存器复位为0。</p>
<p>在Logisim中异步复位是容易实现的，因为像诸如寄存器一类的时序逻辑部件往往提供异步复位的输入端口，只需要将复位信号接到对应端口即可。现实中也往往是这样，因为在物理层面，异步复位的设计更容易实现，而同步复位往往需要更复杂的架构或更多的晶体管。</p>
<p>所以Logisim中的部件一般没有同步复位端口，使用Logisim实现同步复位需要在上升沿向寄存器写入0，因此在输入端口增加一个Multiplexer，当reset信号有效时选择0，否则选择输入数据。这样就可以实现同步复位了。</p>
<h3 id="关于快捷键"><a href="#关于快捷键" class="headerlink" title="关于快捷键"></a>关于快捷键</h3><p>其实自己摸索一下大概也就出来了。</p>
<ul>
<li><code>Ctrl</code> + <code>1~8</code>: 选中菜单栏从左往右数的对应选项。</li>
<li><code>数字</code>: 设置端口数，不同器件效果不同。逻辑门中表示输入端口数，选择器中表示选择信号位宽，<code>Splitter</code>中表示分支个数，<code>Bit Extander</code>中表示输入信号位宽，<code>Bit Selector</code>中表示输出信号位宽。想要输入两位数的时候就快速按两下数字。</li>
<li><code>Alt</code> + <code>数字</code>: 设置输入信号位宽，不同器件效果不同。</li>
<li><code>Ctrl</code> + <code>D</code>: 等价于<code>Ctrl</code> + <code>C</code> 并且 <code>Ctrl</code> + <code>V</code>。</li>
<li><code>Ctrl</code> + <code>T</code>: Tick。时钟信号走一次。</li>
<li><code>Ctrl</code> + <code>K</code>: 时钟信号持续变化，自己试一试就明白了。</li>
<li><code>Ctrl</code> + <code>E</code>: 开启和关闭仿真。关闭时相当于给了一个全局暂停信号。</li>
</ul>
<p>还是可以快一点点的。</p>
<p>待补充~</p>
]]></content>
      <categories>
        <category>CO</category>
      </categories>
      <tags>
        <tag>CO</tag>
        <tag>FSM</tag>
        <tag>Logisim</tag>
      </tags>
  </entry>
  <entry>
    <title>「BUAA CO」P3 &amp; P4总结</title>
    <url>/2024/01/02/CO/P3&amp;P4/</url>
    <content><![CDATA[<p>22级从<code>P3</code>开始闯关，但是<code>P3</code> <code>P4</code>总体开发量较小，稍微划划水写写<code>OO-Pre</code>也不是不行。建议基础不牢的同学留一次挂的机会给<code>P5</code>，不要在<code>P3</code>和<code>P4</code>挂太多次</p>
<p>P3和P4的上机内容大致相当，因此我就放在一块进行说明了。</p>
<h2 id="P3"><a href="#P3" class="headerlink" title="P3"></a>P3</h2><p><code>Logisim</code>搭建<code>单周期CPU</code>。实现的指令不多，整体工作量也并不大。设计文档和电路在<a class="link" href="https://github.com/Squirrel7ang/BUAA-CO-2023-Aut">这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。个人遇到的位移一个坑是P1的GRF搭建错了，而且P1居然没有测出来。搭建前建议先弄清楚单周期CPU是个啥东西再搭建，弄清楚了之后就比较简单了。</p>
<h3 id="个人建议"><a href="#个人建议" class="headerlink" title="个人建议"></a>个人建议</h3><ol>
<li>善用<code>tunnel</code>。<code>tunnel</code>类似<code>verilog</code>中<code>wire</code>类型的变量，将导线赋予名称有了意义之后，可读性会强一点。但是不建议全部<code>tunnel</code>以至于没有一根完整的线，那样子结构可能会怪怪的（虽然<code>P4</code>命名就舒服很多了）。</li>
<li>第一次上机如果挂了不要灰心！逆风翻盘的机会大把大把地。可以先稍微准备一下<code>P4</code>。</li>
</ol>
<h2 id="P4"><a href="#P4" class="headerlink" title="P4"></a>P4</h2><p><code>P4</code>相当于在<code>P3</code>的基础上加了几条指令，并将<code>Logisim</code>语言翻译成<code>Verilog</code>语言。设计本身难度较低，个人认为难度全在<code>verilog</code>语法和特性上。我第一次搭建的时候de不出bug，被迫重构，一晚上重构完真的是舒服多了。</p>
<h3 id="个人建议-1"><a href="#个人建议-1" class="headerlink" title="个人建议"></a>个人建议</h3><ol>
<li>熟悉一下<code>Verilog</code>的语法再上。别像我一样整的连怎么实例化一个模块都不知道就上了。</li>
<li>上机前看一下往年的上机题。一些上机题需要用到一些<code>Verilog</code>的语法，比如说循环（而显然我不会）。我在<a href="https://squirrel7ang.github.io/2024/01/01/CO/verilog_error/">这一篇文章</a>里面有写一些建议。</li>
<li>挂了不要灰心！可以先稍微准备一下<code>P5</code>，毕竟<code>P5</code>的开发量相比来说还是蛮大的</li>
</ol>
]]></content>
      <categories>
        <category>CO</category>
      </categories>
      <tags>
        <tag>CO</tag>
        <tag>Logisim</tag>
        <tag>Verilog</tag>
        <tag>单周期CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>「BUAA CO」P5总结</title>
    <url>/2024/01/02/CO/P5/</url>
    <content><![CDATA[<h2 id="主要任务"><a href="#主要任务" class="headerlink" title="主要任务"></a>主要任务</h2><h2 id="顶层设计"><a href="#顶层设计" class="headerlink" title="顶层设计"></a>顶层设计</h2><p><img lazyload="" src="/images/loading.svg" data-src="/images/CO/P5/CIRC.png" alt="P5_CIRC"></p>
<p>其中红色为转发有关设计、绿色为阻塞有关设计</p>
<h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>P5是一个难点，代码量也比P4要多很多，很容易挂或者<code>Gap</code>，建议合理分配时间。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="1-集中式译码和分布式译码"><a href="#1-集中式译码和分布式译码" class="headerlink" title="1. 集中式译码和分布式译码"></a>1. 集中式译码和分布式译码</h3><p>集中式译码将控制信号集中译码出来，再逐级流水；而分布式译码在每一级都设置译码单元，将该流水级需要使用的控制信号译码出来。我在P5的设计中采用了集中式译码，但是经历了P7之后，个人认为分布式译码方便不止一点点。</p>
<h4 id="集中式译码的控制信号表示"><a href="#集中式译码的控制信号表示" class="headerlink" title="集中式译码的控制信号表示"></a>集中式译码的控制信号表示</h4><p>由于集中式译码会一次性产生大量控制信号，需要为每一个控制信号专门在流水级分配一个寄存器。但是这种方式太麻烦，因此可以规定控制信号的排列顺序，用<code>vector</code>将控制信号合并一同传递。这种方式的缺点是可读性低，每次都需要查询控制信号的某一位对应的是什么控制信号。因此我在<code>mips.v</code>文件的开头将控制信号全部用<code>wire</code>类型变量接了出来，使得还不如直接分布式译码。</p>
<!-- （附一张图片吧） -->

<p>个人认为集中式译码的一个好处在于可以将控制信号流水。这意味着如果某一流水级的结果对后续流水级造成影响时，可以通过改变传递给下一流水级的控制信号来实现。但是分布式译码的结果直接取决于指令本身。</p>
<p>举个例子，比方说写入寄存器的<code>reg_write</code>控制信号，描述了一条指令是否需要写入寄存器。指令<code>beqal $t0, $t1, TARGET</code>表示如果<code>$t0</code>和<code>$t1</code>相等，则跳转到<code>TARGET</code>并链接（将当前<code>PC</code>写入<code>$31</code>）。这时候分布式译码无法根据指令本身判断<code>reg_write</code>的值，因此指令在W级时需要保留D级<code>CMP</code>模块的比较结果，因此需要额外流水D级<code>CMP</code>比较结果。但是集中式译码只需要根据D级的比较结果选择指定信号传递给E级的<code>reg_write</code>就行。</p>
<p>在之后的设计中，流水数据或信号是很常见的，也并不困难。因此集中式译码的上述优势并不显著。在P7的异常判断中，分布式译码会表现出一定的优势<del>所以我将分布式和集中式进行了混搭</del>。<strong>建议分布式译码</strong>。</p>
<h3 id="2-T-new-T-use"><a href="#2-T-new-T-use" class="headerlink" title="2. $T_{new}$ & $T_{use}$"></a>2. <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="4.36ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 1927.1 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1066,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g></g></svg></mjx-container> &amp; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="3.92ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 1732.6 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1041,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g></g></svg></mjx-container></h3><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="4.36ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 1927.1 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1066,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="3.92ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 1732.6 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1041,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g></g></svg></mjx-container>可以方便地描述转发和暂停条件。建议在着手写转发和暂停之前先理解<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="4.36ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 1927.1 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1066,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="3.92ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 1732.6 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1041,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g></g></svg></mjx-container>再推进进度。需要注意的有：</p>
<ul>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="4.36ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 1927.1 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1066,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g></g></svg></mjx-container>不能减为负数，在一些设计中可能会出问题。</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="8.508ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 3760.6 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1066,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2204.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3260.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>时可以视为这条指令不会写入寄存器；</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="9.199ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 4066.2 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1041,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2010.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3066.2,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container>可以视为这条指令不会使用到寄存器。<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 1000 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container>可以用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="3.52ex" height="1.817ex" role="img" focusable="false" viewBox="0 -665 1555.8 803"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1055.8,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container>的任何一个数去表示，因为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="3.52ex" height="1.817ex" role="img" focusable="false" viewBox="0 -665 1555.8 803"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1055.8,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container>时在W流水级及之后不会有任何接受转发的位点。</li>
</ul>
<h3 id="3-转发-Forwarding"><a href="#3-转发-Forwarding" class="headerlink" title="3. 转发 $Forwarding$"></a>3. 转发 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="12.043ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 5323 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mi" transform="translate(749,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1234,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1685,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(2401,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(2930,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3381,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(3901,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4246,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4846,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container></h3><p>2023计组课程组要求能转发尽量转发。但是这个要求是针对P5课下而言的。在P7的<code>eret</code>的实现中可以阻塞也可以转发。</p>
<h4 id="转发位置"><a href="#转发位置" class="headerlink" title="转发位置"></a>转发位置</h4><p>转发位点见顶层设计图。</p>
<p>转出位点有：</p>
<ol>
<li>W级写入数据</li>
<li>M级写入数据</li>
</ol>
<p>接受转发位点有：</p>
<ol>
<li>M级DM的地址</li>
<li>E级的两个操作数</li>
<li>D级GRF（内部转发）</li>
</ol>
<p>转发要求从流水寄存器转发，这样能够缩短流水级的关键路径，使得时钟周期不会因为转发而增加太多，甚至是不增加。</p>
<p>我在设计的过程中并没有使用内部转发，而是改成了向D级转发。效果完全相同，不过不建议这么做</p>
<h4 id="转发条件"><a href="#转发条件" class="headerlink" title="转发条件"></a>转发条件</h4><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="11.297ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 4993.2 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1066,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2204.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msub" transform="translate(3260.6,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1041,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g></g></svg></mjx-container>或者无脑转发——只要后续流水级有对寄存器的更新就转发。</p>
<p>接受转发时先接受M级转发在接受W级转发。</p>
<h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>可以用分布式的转发模块对转发进行管理，也可以使用一个集中转发控制模块对全部转发任务进行控制。我选择了前者，在每一个转发位点实例化了一个<code>_FWD</code>模块对该位点是否接受转发进行判断<del>然后被助教骂了一顿</del>。</p>
<h3 id="4-暂停-Stall"><a href="#4-暂停-Stall" class="headerlink" title="4. 暂停 $Stall$"></a>4. 暂停 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.821ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 2131 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1006,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1535,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1833,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></svg></mjx-container></h3><h4 id="阻塞位置"><a href="#阻塞位置" class="headerlink" title="阻塞位置"></a>阻塞位置</h4><p>全部指令需要阻塞在D级，也就是说包括D级在内的所有流水级都要冻住，E级流水寄存器要产生空泡。具体来说，暂停信号作用的地方有</p>
<ul>
<li>D级流水寄存器，使之不更新</li>
<li>PC，使之不更新（或者NPC，使之等于PC）</li>
<li>E级流水寄存器，使之产生空泡</li>
</ul>
<h4 id="阻塞条件"><a href="#阻塞条件" class="headerlink" title="阻塞条件"></a>阻塞条件</h4><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="11.297ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 4993.2 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1066,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2204.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="msub" transform="translate(3260.6,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1041,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g></g></svg></mjx-container> 且 目标寄存器号相等 且 <strong>都不等于0</strong>。</p>
<h4 id="关于空泡"><a href="#关于空泡" class="headerlink" title="关于空泡"></a>关于空泡</h4><p>空泡的PC建议保留为被阻塞指令的PC，比方说beq被阻塞在D级，那么E级产生的空泡的PC就保持和beq的PC相同。这在P7中会用到，不过也可以等到P7再改。</p>
<h3 id="5-关于冲突"><a href="#5-关于冲突" class="headerlink" title="5. 关于冲突"></a>5. 关于冲突</h3><p>课上学习我们了解到，冲突有三种，其中结构冲突通过我们的哈佛结构CPU已经解决，控制冲突在MIPS中是通过延迟槽解决的，而数据冲突的三种类型(WAW, RAW, WAR)中，只有写后读(RAW)需要我们操心。WAW在我们的流水线中几乎不会产生影响，这是因为我们一个时钟周期只会对同一个存储设备的同一个位置进行一次写入；WAR也不会有什么问题，在我们的设计中，写操作并不会对读操作带来多大的干扰，如果非要说，就是内部转发解决了这个冲突。</p>
<p><strong>祝P5一切顺利！</strong></p>
]]></content>
      <categories>
        <category>CO</category>
      </categories>
      <tags>
        <tag>CO</tag>
        <tag>Verilog</tag>
        <tag>流水线CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>「BUAA CO」P6总结</title>
    <url>/2024/01/02/CO/P6/</url>
    <content><![CDATA[<h2 id="主要任务"><a href="#主要任务" class="headerlink" title="主要任务"></a>主要任务</h2><h3 id="1-新增指令"><a href="#1-新增指令" class="headerlink" title="1.新增指令"></a>1.新增指令</h3><p>本次课下P6总共需要实现指令<strong>一共</strong>28条，其中</p>
<ul>
<li>R类算术指令6条： <code>add</code>, <code>and</code>, <code>or</code>, <code>slt</code>, <code>sltu</code>, <code>sub</code></li>
<li>I类算术指令4条： <code>addi</code>, <code>andi</code>, <code>lui</code>, <code>ori</code></li>
<li>Jr类指令1条： <code>jr</code></li>
<li>Jump类指令1条： <code>jal</code></li>
<li>branch类指令2条： <code>beq</code>, <code>bne</code></li>
<li>乘除指令4条： <code>mult</code>, <code>multu</code>, <code>div</code>, <code>divu</code></li>
<li>HILO指令4条： <code>mfhi</code>, <code>mflo</code>, <code>mthi</code>, <code>mtlo</code></li>
<li>load类指令3条： <code>lb</code>, <code>lh</code>, <code>lw</code></li>
<li>store类指令3条： <code>sb</code>, <code>sh</code>, <code>sw</code></li>
</ul>
<p>指令按照字典序排序为：<br><code>add</code>,     <code>addi</code>,    <code>and</code>,     <code>andi</code>,<br><code>beq</code>,     <code>bne</code>,     <code>div</code>,     <code>divu</code>,<br><code>jal</code>,     <code>jr</code>,      <code>lb</code>,      <code>lh</code>,<br><code>lui</code>,     <code>lw</code>,      <code>mfhi</code>,    <code>mflo</code>,<br><code>mthi</code>,    <code>mtlo</code>,    <code>mult</code>,    <code>multu</code>,<br><code>ori</code>,     <code>or</code>,      <code>sb</code>,      <code>sh</code>,<br><code>slt</code>,     <code>sltu</code>,    <code>sub</code>,     <code>sw</code></p>
<p>相较以前还是减了不少负。虽然但是难度没有降低太多，只是设计不会再像以往那么繁琐复杂了。</p>
<h3 id="2-新增模块"><a href="#2-新增模块" class="headerlink" title="2.新增模块"></a>2.新增模块</h3><p>增加乘除模块（下统称为<code>MDU</code>，即<code>Mult-Div Unit</code>），置于E级，完成乘除类指令和与<code>HILO</code>有关的指令。内置<code>HI</code>和<code>LO</code>寄存器.</p>
<h2 id="顶层设计"><a href="#顶层设计" class="headerlink" title="顶层设计"></a>顶层设计</h2><p><img lazyload="" src="/images/loading.svg" data-src="/images/CO/P6/CIRC.png" alt="P6_CIRC"></p>
<p>其中红色为转发有关设计，绿色为阻塞有关设计，蓝色为乘除有关设计。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="1-单条乘除指令的实现"><a href="#1-单条乘除指令的实现" class="headerlink" title="1.单条乘除指令的实现"></a>1.单条乘除指令的实现</h3><p>官方大大简化了乘除指令的实现，使得我们不需要搭建乘法器和除法器，只需要在相应的时钟周期内完成乘法和除法就行。</p>
<h4 id="乘除指令的时钟周期"><a href="#乘除指令的时钟周期" class="headerlink" title="乘除指令的时钟周期"></a>乘除指令的时钟周期</h4><p>乘法占用5个周期，除法10个周期。但是实际上可能并不是这样。拿<code>mult</code>来说，根据教程的波形图我们可以知道：</p>
<ul>
<li><code>start</code>信号1周期</li>
<li><code>busy</code>信号5周期</li>
<li>在<code>busy</code>信号有效的最后一个时钟周期内阻塞信号也是有效的，因此还会再拖1个周期</li>
</ul>
<p>所以严格来说乘法在E级停留了7个周期，比一般只停留1个周期的指令多停留了6个周期，5个周期指的是<code>Busy</code>信号有5个周期，即运算了5个周期，暂停信号是<code>Start</code>信号和<code>Busy</code>信号做或运算的结果，因此有6个周期的暂停信号。</p>
<p>除法指令同上，不同的是<code>busy</code>信号有10个周期。</p>
<h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>本人是使用有限状态机实现课程对于<code>MDU</code>的要求。不同人的实现方法不同，需要注意的是考虑到课上几乎必考一条乘除指令，需要除以<code>MDU</code>在运算方式和运算时钟周期上的可扩展性。具体实现可以参考<a class="link" href="https://github.com/Squirrel7ang/BUAA-CO-2023-Aut/blob/main/P6_v2/E_MDU.v">我的仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，但是考虑到我的设计的可读性不强，建议自行搭建。</p>
<h3 id="2-乘除指令的暂停阻塞"><a href="#2-乘除指令的暂停阻塞" class="headerlink" title="2.乘除指令的暂停阻塞"></a>2.乘除指令的暂停阻塞</h3><p>当<code>start</code>信号和<code>Busy</code>信号的任意一个有效时，就要产生一个阻塞信号。MDU的阻塞信号和P5的阻塞信号效果完全一致，因此“或”一下就行。</p>
<p>乘除指令和<code>HILO</code>指令加在一起总共8条。这八条指令可以分为两类，即需要读<code>HILO</code>的指令和写<code>HILO</code>的指令。读后写不需要阻塞，写后读必须阻塞，写后写可以阻塞也可以不阻塞，官方测试保证不会在写后写<code>HILO</code>上卡时间。</p>
<p>乘除指令不会影响乘除和<code>HILO</code>指令之外的指令，这些不受影响的指令要正常流水。</p>
<h3 id="3-其它问题"><a href="#3-其它问题" class="headerlink" title="3.其它问题"></a>3.其它问题</h3><ul>
<li>指令多了，请认真检查控制信号。</li>
<li>在一些人的实现中，乘除指令的操作数和乘除类型都要用<code>reg</code>保存在MDU中，以免被后续指令覆盖。要么需要用两个<code>reg</code>存储运算结果，并在结束运算时写入<code>HILO</code>。</li>
</ul>
]]></content>
      <categories>
        <category>CO</category>
      </categories>
      <tags>
        <tag>CO</tag>
        <tag>Verilog</tag>
        <tag>流水线CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>「BUAA CO」计组小白的自动化测试</title>
    <url>/2024/01/09/CO/AutoTest/</url>
    <content><![CDATA[<h1 id="关于iverilog和verilog的自动化测试"><a href="#关于iverilog和verilog的自动化测试" class="headerlink" title="关于iverilog和verilog的自动化测试"></a>关于iverilog和verilog的自动化测试</h1><p>从P4开始的CPU搭建全部是使用Verilog语言来实现的，使用iverilog进行轻量自动化测试还是很方便的。需要注意的是，考试用的虚拟机有<code>python</code>和<code>gcc</code>，但是没有<code>iverilog</code> <code>vvp</code> <code>gtkwave</code>，<code>windows</code>中也没有。</p>
<p>下面以P4为例，简单介绍一下自动化测试的方式，以避免像我这样的<strong>计组小白</strong>走弯路。下面使用的是22级计组官方debian虚拟机进行自动化测试。windows与之类似。</p>
<p>假设写好的测试文件名为<code>test.asm</code>。</p>

  <div class="note p-4 mb-4 rounded-small primary">
    <p>但如果你是一个希望探索计组的小白，那还是建议自己搭建自动化测评装置。</p>

  </div>

<h2 id="用MARS输出标准答案"><a href="#用MARS输出标准答案" class="headerlink" title="用MARS输出标准答案"></a>用MARS输出标准答案</h2><p>标准MARS无法使用命令行在运行过程中对寄存器或者内存进行监视，建议自行寻找解决方案，比如自己魔改MARS或者写一个自动化仿真程序</p>
<details class="blue" data-header-exclude=""><summary><i class="fa-solid fa-chevron-right"></i>Folding 但是如果改不了一点... </summary>
              <div class="content">
              <p>可以使用Toby学长改好的MARS，<a class="link" href="https://github.com/Toby-Shi-cloud/Mars-with-BUAA-CO-extension">链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>将下载的文件重命名为<code>mars.jar</code>，并放在和test.asm文件相同的文件夹下，在该目录的终端下运行：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ java -jar mars.jar mc CompactLargeText coL1 test.asm &gt; mars_tmp.txt</span><br></pre></td></tr></table></figure></div><p>这会将mars运行test.asm的正确结果连通mars的输出信息重定向写入mars_tmp.txt文件中。文件除了包含正确输出以外，还包含Mars的输出信息。因此需要在后续步骤中对格式进行检查。这我们在后面再说。</p>
              </div>
            </details>

<h2 id="用MARS输出机器码"><a href="#用MARS输出机器码" class="headerlink" title="用MARS输出机器码"></a>用MARS输出机器码</h2><p>标准Mars、魔改Mars和课程组官方Mars都能实现这一点，只需要运行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ java -jar mars.jar dump .text HexText code.txt mc CompactLargeText test.asm</span><br></pre></td></tr></table></figure></div>
<p>就会在本地生成一个code.txt文件</p>
<h2 id="用iverilog对CPU进行仿真"><a href="#用iverilog对CPU进行仿真" class="headerlink" title="用iverilog对CPU进行仿真"></a>用iverilog对CPU进行仿真</h2><p>下面是关于如何实现在有正确输出结果的情况下，将CPU的输出结果输出到文本文件中。</p>
<h3 id="1-安装iverilog和vvp"><a href="#1-安装iverilog和vvp" class="headerlink" title="1. 安装iverilog和vvp"></a>1. 安装iverilog和vvp</h3><p>打开Debian终端，或者在Debian虚拟机中按下<code>Win</code>+<code>R</code>键，在其中输入：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install iverilog</span><br></pre></td></tr></table></figure></div>
<p>这会安装<code>iverilog</code>以及<code>vvp</code>。<code>iverilog</code>是用于对<code>verilog</code>进行仿真的工具，其中<code>iverilog</code>能够对<code>verilog</code>进行编译，而<code>vvp</code>能够对编译出来的结果进行仿真。可以理解为前者编译后者运行。</p>
<h3 id="2-编写testbench"><a href="#2-编写testbench" class="headerlink" title="2. 编写testbench"></a>2. 编写testbench</h3><p>在testbench的initial语句块的结束写上<code># [仿真时长] $finish;</code>告诉<code>iverilog</code>要仿真多久结束。和<code>ISE</code>不同，<code>ISE</code>的仿真似乎默认1000周期，但是iverilog默认一直仿真。用<code>$stop</code>替代<code>$finish</code>相当于断点的效果，在仿真结束后vvp会进入interact模式而非直接退出。</p>
<p><code>Ctrl</code>+<code>C</code>可以停止仿真。</p>
<div class="highlight-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line"><span class="comment">// dumpfile("wave.vcd") // 用于gtkwave示波</span></span><br><span class="line"><span class="comment">// dumpvars(0, mips_tb) // 同上</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"># <span class="number">4000</span> <span class="built_in">$finish</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div>

<p>testbench我这里就不写了，毕竟不同人的写法不同，而且单周期的testbench基本上能跑起来就没问题，不需要考虑什么时钟周期乱七八糟的。</p>
<h3 id="3-用iverilog运行代码"><a href="#3-用iverilog运行代码" class="headerlink" title="3. 用iverilog运行代码"></a>3. 用iverilog运行代码</h3><p>假设<code>mips_tb.v</code>中的模块为<code>mips_tb</code>。其中包含了<code>mips</code>模块</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ iverilog -s mips_tb -o mips_tb.out *.v</span><br><span class="line">$ vvp mips_tb.out</span><br></pre></td></tr></table></figure></div>

<p><code>-o</code>表示将编译结果输出到当前目录下的<code>mips_tb.out</code>文件中，<code>-s mips_tb</code>指定仿真的顶层<strong>模块名</strong>。iverilog默认将没有被实例化的模块设置为root模块，这意味着如果有多个testbench文件的话，iverilog会一起进行仿真。在P7中我们可能会利用不同的testbench进行不同的中断测试，当我们想要使用特定的testbench进行仿真的时候就会需要使用到<code>-s</code>参数。只有1个testbench的时候可以不加<code>-s</code>参数。</p>
<h3 id="4-重定向输出"><a href="#4-重定向输出" class="headerlink" title="4. 重定向输出"></a>4. 重定向输出</h3><p><code>vvp</code>进行仿真之后会将<code>CPU</code>和<code>iverilog</code>的信息一同输出到标准输出中，我们将这些输出重定向到文件<code>tmp.txt</code>中。这个文件中不仅包含了<code>CPU</code>的输出，也包含了<code>iverilog</code>的仿真信息。我们先将其输出到一个临时文件中。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ vvp mips_tb.out &gt; my_tmp.txt</span><br></pre></td></tr></table></figure></div>

<h3 id="5-检查输出格式"><a href="#5-检查输出格式" class="headerlink" title="5. 检查输出格式"></a>5. 检查输出格式</h3><p>22级计算机组成对CPU输出格式有要求，在测评的时候也会忽略掉不符合输出格式的输出。</p>

  <div class="note p-4 mb-4 rounded-small primary">
    <p>寄存器信息：&lt;仿真时间&gt;@&lt;程序计数器地址&gt;: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="52.92ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 23390.7 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(1055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">寄</text></g><g data-mml-node="mi" transform="translate(2055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">存</text></g><g data-mml-node="mi" transform="translate(3055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">器</text></g><g data-mml-node="mi" transform="translate(4055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">编</text></g><g data-mml-node="mi" transform="translate(5055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">号</text></g><g data-mml-node="mo" transform="translate(6333.6,0)"><g data-mml-node="text"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="text" transform="translate(1556,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="text" transform="translate(2334,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g></g><g data-mml-node="mi" transform="translate(9723.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">写</text></g><g data-mml-node="mi" transform="translate(10723.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">入</text></g><g data-mml-node="mi" transform="translate(11723.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(12723.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mo" transform="translate(14001.1,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mi" transform="translate(15056.9,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(16056.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">如</text></g><g data-mml-node="mn" transform="translate(17056.9,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(18056.9,0)"><g data-mml-node="mo"><path data-c="40" d="M56 347Q56 429 86 498T164 612T270 680T386 705Q522 705 622 603T722 349Q722 126 608 126Q541 126 513 176Q512 177 512 179T510 182L509 183Q508 183 503 177T487 163T464 146T429 132T385 126Q311 126 251 186T190 347Q190 448 251 508T385 568Q426 568 460 548T509 511T531 479H555Q580 479 582 478Q586 477 587 468Q588 454 588 338V260Q588 200 593 182T619 163Q641 163 655 178T674 223T680 273T682 325V330Q682 426 647 500Q611 569 544 618T388 668Q271 668 184 577T96 347Q96 216 180 121T396 26Q421 26 446 28T493 34T535 43T573 52T605 63T629 72T647 80T657 84H716Q722 78 722 74Q722 65 675 45T547 7T392 -11Q255 -11 156 90T56 347ZM274 347Q274 266 308 214T390 162Q420 162 449 182T498 235L504 245V449L498 459Q453 532 387 532Q347 532 311 483T274 347Z"></path></g></g><g data-mml-node="mn" transform="translate(18834.9,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(2000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3000,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(3500,0)"></path></g><g data-mml-node="mo" transform="translate(23112.7,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g></g></g></svg></mjx-container>​28 &lt;= ff00ff00。<br>数据存储器信息：&lt;仿真时间&gt;@&lt;程序计数器地址&gt;: *&lt;数据存储器地址&gt; &lt;= &lt;写入数据&gt;，如 1746@00003704: *00000018 &lt;= 69b5cca3</p>

  </div>

<p>但是在正确性的比对中，我们不需要关心时钟周期，只需要关注<code>@</code>开始的部分即可。</p>
<p><code>linux</code>中的<code>grep</code>指令可以方便地按照正则表达式对文本进行匹配查找。</p>
<p>CPU输出格式的正则表达式可以写为<code>'(@[0-9a-f]{8}: *\*[0-9a-f]{8} *&lt;= *[0-9a-f]{8} *\n)|(@[0-9a-f]{8}: *\$[0-9]{2} *&lt;= *[0-9a-f]{8} *\n)'</code></p>
<p>但是为了简单起见，我们用<code>@</code>进行匹配就行。运行：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep <span class="string">'@'</span> my_tmp.txt &gt; my.txt</span><br><span class="line">$ grep <span class="string">'@'</span> mars_tmp.txt &gt; mars.txt</span><br></pre></td></tr></table></figure></div>
<p>这样子我们就把所有含有<code>@</code>的行选出来输出到后面的文件中了。</p>
<h2 id="比对输出文件"><a href="#比对输出文件" class="headerlink" title="比对输出文件"></a>比对输出文件</h2><p><code>linux</code>中的<code>diff</code>指令可以清晰地看到两个文件的差异，缺点是看到的太详细了。不过我个人不太计较。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ diff -y (-H) -B -b my.txt mars.txt &gt; result.txt</span><br></pre></td></tr></table></figure></div>

<p>其中<code>-y</code>表示将文件“肩并肩”地输出。<code>-H</code>用于大规模文本比对，我们的规模比较小，不需要。<code>-B</code>表示不对空行进行比对。<code>-b</code>表示不对空格进行比对。我们将比较的结果重定向到了<code>result.txt</code>文件中。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大概要用到这些指令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ java -jar mars.jar mc CompactLargeText coL1 test.asm &gt; mars_tmp.txt</span><br><span class="line"></span><br><span class="line">$ java -jar mars.jar dump .text HexText code.txt mc CompactLargeText test.asm</span><br><span class="line"></span><br><span class="line">$ iverilog -s mips_tb -o mips_tb.out *.v</span><br><span class="line">$ vvp mips_tb.out &gt; my_tmp.txt</span><br><span class="line"></span><br><span class="line">$ grep <span class="string">'@'</span> my_tmp.txt &gt; my.txt</span><br><span class="line">$ grep <span class="string">'@'</span> mars_tmp.txt &gt; mars.txt</span><br><span class="line"></span><br><span class="line">$ diff -y (-H) -B -b my.txt mars.txt &gt; result.txt</span><br></pre></td></tr></table></figure></div>

<h2 id="编写成shell脚本"><a href="#编写成shell脚本" class="headerlink" title="编写成shell脚本"></a>编写成shell脚本</h2><p>shell脚本在linux中能够方便的运行多条linux指令。在第二学年的春季学期我们也会接触到它的具体写法，因此我也不会。</p>
<p>不过我们也不需要会。</p>
<p>打开<code>ChatGPT</code>，耐(man)心(man)指(tiao)导(jiao)它帮我们写一个小shell脚本。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件路径</span></span><br><span class="line">mars_jar="mars.jar"</span><br><span class="line">code_txt="code.txt"</span><br><span class="line">verilog_files="*.v"</span><br><span class="line">mars_tmp="mars_tmp.txt"</span><br><span class="line">my_tmp="my_tmp.txt"</span><br><span class="line">tb_out="mips_tb.out"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">存储临时文件名的数组</span></span><br><span class="line">tmp_files=("$mars_tmp" "$my_tmp" "$my_tmp.txt" "$mars_tmp.txt" "$tb_out")</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理临时文件的函数</span></span><br><span class="line">clean_tmp_files() {</span><br><span class="line">  for file in "${tmp_files[@]}"; do</span><br><span class="line">    if [ -f "$file" ]; then</span><br><span class="line">      rm "$file"</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line">}</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">循环处理每个test.asm文件</span></span><br><span class="line">for asm_file in test*.asm; do</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">生成对应的result.txt文件名</span></span><br><span class="line">  result_file="${asm_file%.asm}_result.txt"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">第一条指令</span></span><br><span class="line">  java -jar "$mars_jar" mc CompactLargeText coL1 "$asm_file" &gt; "$mars_tmp"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">第二条指令</span></span><br><span class="line">  java -jar "$mars_jar" dump .text HexText "$code_txt" mc CompactLargeText "$asm_file" &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">第三条指令</span></span><br><span class="line">  iverilog -s mips_tb -o $tb_out $verilog_files &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">第四条指令</span></span><br><span class="line">  vvp $tb_out &gt; "$my_tmp"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">第五条指令</span></span><br><span class="line">  grep '@' "$my_tmp" &gt; "$my_tmp.txt"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">第六条指令</span></span><br><span class="line">  grep '@' "$mars_tmp" &gt; "$mars_tmp.txt"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">第七条指令</span></span><br><span class="line">  if ! diff -q "$my_tmp.txt" "$mars_tmp.txt"; then</span><br><span class="line">    diff -y -H -B -b "$my_tmp.txt" "$mars_tmp.txt" &gt; "$result_file"</span><br><span class="line">    echo "$asm_file 运行不正确，比对结果在 $result_file 中。"</span><br><span class="line">  else</span><br><span class="line">    echo "$asm_file 运行正确。"</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理临时文件</span></span><br><span class="line">clean_tmp_files</span><br></pre></td></tr></table></figure></div>
<p>将之前提到的所有文件都放在同一个文件目录下。</p>
<p>调用指令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> test.sh</span><br><span class="line">$ <span class="built_in">chmod</span> +x test.sh</span><br></pre></td></tr></table></figure></div>
<p>这会新建一个叫<code>test.sh</code>的文件，然后将这个文件标记为可执行文件。</p>
<p>然后打开test.sh文件，将上述代码写进去。</p>
<p>我们运行一下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./test.sh</span><br><span class="line">test.asm 运行正确。</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">ALU.v*     CTRL.v*  EXT.v*  header.v*  Mars.jar*   mips.v*    test.sh*</span><br><span class="line">code.txt*  DM.v*    GRF.v*  IFU.v*     mips_tb.v*  test.asm*</span><br></pre></td></tr></table></figure></div>
<p>成功。</p>
<p>即便不懂shell脚本，瞪几眼也大概能看懂，可读性还是很高的。可以在这个基础上修改一下，让自动化测试符合自己的预期要求。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/CO/AutoTest/chat.png" alt="ChatGPT"></p>
<h2 id="P5测试"><a href="#P5测试" class="headerlink" title="P5测试"></a>P5测试</h2><p>（待补充 ~）</p>
<p>（概率不补充，因为自己也只会胡说八道）。</p>
]]></content>
      <categories>
        <category>CO</category>
      </categories>
      <tags>
        <tag>CO</tag>
        <tag>Verilog</tag>
      </tags>
  </entry>
  <entry>
    <title>「BUAA OO」Unit-1 表达式计算</title>
    <url>/2024/03/13/OO/Unit-1/</url>
    <content><![CDATA[<h1 id="2024-BUAA-OO-Unit-1-从-到简易科学计算器"><a href="#2024-BUAA-OO-Unit-1-从-到简易科学计算器" class="headerlink" title="2024 BUAA OO Unit 1: 从 + - * ^ 到简易科学计算器"></a>2024 BUAA OO Unit 1: 从 + - * ^ 到简易科学计算器</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在面向对象程序设计中，我认为带着问题去设计程序是一件很有必要的事情。因此在这篇博客中，我会在每一次迭代设计的架构叙述中根据要求提出几个关键问题，再通过解决这些关键问题来呈现我的思考。</p>
<h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>给定一个只含有 <code>x</code> 的单变量表达式，完成对该表达式的化简（展开）并输出。要求：</p>
<ol>
<li>输出最简无多余括号</li>
<li>输出越短越好</li>
</ol>
<h2 id="三、架构设计、考虑、分析、优化和反思"><a href="#三、架构设计、考虑、分析、优化和反思" class="headerlink" title="三、架构设计、考虑、分析、优化和反思"></a>三、架构设计、考虑、分析、优化和反思</h2><p>由于我在每一次作业中都记录了自己的设计策略和反思，我决定将架构的量化分析分析、优化和反思分作业呈现出来。设计考虑在下面的内容中都有体现。由于时间原因，我使用了puml语言描述类图，并利用graphviz将其转化为类图。</p>
<h3 id="第一次作业"><a href="#第一次作业" class="headerlink" title="第一次作业"></a>第一次作业</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入的表达式满足以下要求：</p>
<ol>
<li>只有关于<code>x</code>的非负整数幂</li>
<li>指数永远是非负整数</li>
<li>只有一层括号</li>
<li>输出不能有括号</li>
</ol>
<h4 id="数据限制"><a href="#数据限制" class="headerlink" title="数据限制"></a>数据限制</h4><ul>
<li>保证系数有可能爆 <code>int</code> </li>
<li>但由题目可知指数不会爆 <code>int</code> ，因为只有一层括号，而指数最大不超过8。</li>
</ul>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>在叙述我的解决方案之前，我希望能通过解决七个关键问题描述我的思考。</p>
<blockquote>
<p>问题 0：我们需要做什么？总共有哪几个步骤？</p>
</blockquote>
<p>与C语言不同，java作为一款纯度极高的面向对象编程语言，对于抽象化、层次化、模块化的要求更高，相应地性能肯定不如C的高耦合度代码。在这次作业中，我们应该思考的是如何在题目中找到对象，找到方法，建立抽象层次。而这一切又是从功能和数据的角度出发的。所以我们先来分析一下题目的功能要求和可能需要的数据结构：</p>
<p><code>功能要求：读入字符串、解析成表达式后计算表达式。</code></p>
<p>然后我们将功能需求拆解成不同的步骤：</p>
<ol>
<li><code>读入</code>——建立读取读取字符串类—— Java 中已经提供了scanner类用于读取字符串。</li>
<li><code>解析</code>——建立解析字符串类 —— 可以建立一个 Lexer 类。但是在第一次作业中似乎不需要？我们先把这个问题放一边，看看接下来要做什么？</li>
<li><code>存储</code>——建立存储表达式类 —— 这当然是必要的，其本质就是用特定的数据结构将表达式存储起来，那为何不建立一个类来存储这种数据结构呢？</li>
<li><code>计算表达式</code>——建立计算表达式类…吗？ —— 完全没问题，毕竟计算表达式还是挺折腾的。但是用其他类的方法来实现计算似乎也可行…而且似乎可以一边存储一遍计算…再看看还有什么功能先吧。</li>
<li><code>输出</code>——输出字符串类…吗？ —— 似乎没必要。一个方法就行。</li>
</ol>
<p>上面没有回答到的问题我们会在后续看到答案。现在先看一下我们需要用到的数据结构</p>
<ol>
<li><code>存储表达式</code>——表达式类` —— 这似乎是最自然的想法，但是这并没有回答我们需要使用到什么数据结构。我们先把它放一边。</li>
<li><code>存储多项式</code>——多项式类 —— 多项式和表达式有什么不同呢？多项式指输出结果前的数据结构，但是表达式指输入解析后的数据结构。两者当然可以使用同一个类，但接下来我们会看到，使用多项式类有它自己的好处。</li>
</ol>
<p>我们的分析已经基本完成了。接下来我们进一步关注实现的细节。比如说我们在上面的分析中提到的第一个问题——需不需要Lexer？</p>
<blockquote>
<p>问题 1：需不需要输入预处理？（Lexer）</p>
</blockquote>
<p>这似乎是不必要的。因为加减号、正负号、乘号(asterisk)、指数符号(caret)会在表达式读入中才能处理，而括号和自变量需要暂时保留直到表达式用到他们。所以我们能做的就是把常数因子稍微处理一下。</p>
<p>但是从可扩展性的角度出发，进行预处理是好的。预处理能够将函数名称识别出来，将特定符号识别出来；我们可以用特定字符的符号属性来判断这个字符的类型，而不是用字符串比对的原始方法。而这一切都能使代码的结构更加清洗，使可读性更高，同时这也是更符合面向对象编程思想的方式。</p>
<p>下一步。</p>
<blockquote>
<p>问题 2：如何分析表达式？如何存储表达式？</p>
</blockquote>
<p>结合这次作业的抽象语法树已经数据结构课上学的内容，我们现在学了三个方式来处理表达式：</p>
<ol>
<li>维护一个变量栈和一个符号栈，新符号的优先级不高于前面的符号时，就计算前面的式子。</li>
<li>转化为后缀表达式，再利用后缀表达式构建表达式树</li>
<li>抽象语法树 + 递归下降<br>第一种方式是我第一次接触到的计算表达式的方式。这固然好，但问题是不太方便从中分理处对象。第二种方式是我在数据结构课上接触到的方式，也是和抽象语法树非常相似的方式。问题是树太深了——毕竟是一个二叉树。理论上来说，同一优先级的不同操作数可以放在数的同一层。因此就有了我们的抽象语法树（AST）——其实可以把它理解成一种表达式树。</li>
</ol>
<p>有了AST，我们就需要有构建AST的方法，遍历AST的方法和计算AST的方法。这三个功能需求虽然目的各不相同，但是他们的本质都是遍历AST。因此</p>
<blockquote>
<p>问题 3：如何递归下降？如何保证递归的正确性？</p>
</blockquote>
<p>题目是按照AST的思路给出表达式的定义。</p>
<ul>
<li>表达式 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> 空白项 [加减 空白项] 项 空白项 | 表达式 加减 空白项 项 空白项</li>
<li>项 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> [加减 空白项] 因子 | 项 空白项 '*’ 空白项 因子</li>
<li>因子 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> 变量因子 | 常数因子 | 表达式因子</li>
<li>变量因子 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> 幂函数</li>
<li>常数因子 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> 带符号的整数</li>
<li>表达式因子 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> ‘(‘ 表达式 ‘)’ [空白项 指数]</li>
<li>幂函数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> ‘x’ [空白项 指数]</li>
<li>指数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container>  ‘^’ 空白项 [‘+’] 允许前导零的整数  <strong>(注：指数一定不是负数)</strong></li>
<li>带符号的整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> [加减] 允许前导零的整数</li>
<li>允许前导零的整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> (‘0’|’1’|’2’|…|’9’){‘0’|’1’|’2’|…|’9’}</li>
<li>空白项 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> {空白字符}</li>
<li>空白字符 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> （空格） | <code>\t</code></li>
<li>加减 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> ‘+’ | ‘-‘</li>
</ul>
<p>递归下降的对象是AST，而AST是一棵树，因此递归下降的本质其实就是利用递归的方法遍历一棵树。而根据输入顺序进行递归意味着对这棵树的遍历是一次深度优先搜索。而递归的结束标志就是没有更多的表达式因子。</p>
<p>如何递归呢？很简单。表达式就是很多个项，遍历一个表达式就要先遍历全部的项；遍历全部的项就是遍历全部的因子；如果因子是表达式，那就遍历这个表达式。与之前我们接触到的递归不同的是，并不是一个递归函数并不是调用自己本身递归，而是几个函数相互调用递归。</p>
<pre class="mermaid">graph TD
A(表达式)--&gt; A1( - )
A(表达式)--&gt; B1( 项1 )
    B1 --&gt; C11[ -1 ]  
A(表达式)--&gt; A2( + )
A(表达式)--&gt; B2( 项2 )
    B2 --&gt; C21(表达式^6)
        C21 --&gt; D1( 项4 )
            D1 --&gt; E1( x^+02 )
        C21 --&gt; C211( - )
        C21 --&gt; D2( 项5 )
            D2 --&gt; E2( -00128 )
A(表达式)--&gt; A3( - )
A(表达式)--&gt; B3( 项3 )
    B3 --&gt; C31[ x^2 ]
    B3 --&gt; C32[ * ]
    B3 --&gt; C33[ 2 ]</pre>

<blockquote>
<p>问题 4：如何得到答案？</p>
</blockquote>
<p>我的实现方式是参考四则运算的方式来实现的。在只有四则运算的AST中，我们只需要递归调用getValue()方法，并且把每一个getValue()得到的数值在这一级进行运行然后将结果返回给上一级。</p>
<p>比方说，表达式的值是什么呢？是每一个项的值按照项之间的加减号运算后的结果。而我们怎么知道每一个项的值是多少呢？在表达式层，我们假设每一个项都能调用一个getValue()方法，这个方法返回的值都是化简后的一个唯一的数。我们再将求出来的这个表达式的值返回给自己的getValue()方法。这样子表达式的值就是<code>int result = &lt;表达式对象&gt;.getValue()</code>。</p>
<p>但是一个项的值是多少呢？我们也可以假设一个项是每一个因子的值相乘的结果。而每一个因子的值就是因子自身调用getValue()方法得到的。而因子的值是多少呢？在只有数字的四则运算中，因子只有可能是数字和表达式，如果是数字就直接返回数字，如果是表达式就返回表达式的getValue()方法进行递归就行。说白了，就是一个深度优先搜索，不过是通过递归的形式进行遍历的。这样子带来的好处就是编程难度被简化了——有时候如果不明说我们可能都意识不到自己用的是复杂的深度优先搜索算法。</p>
<p>但是在多项式的计算中，并没有一个直观的getValue()方法——毕竟得到的答案并不是一个数字，而是一个多项式。这就引出了第五个问题。</p>
<blockquote>
<p>问题 5：如何存储结果（多项式）？如何输出结果？</p>
</blockquote>
<p>其实在第四个问题中，我们已经有思路了，递归调用getValue()方法就行。我们假设每次返回的不是一个最简的数，而是一个最简的多项式。接下来，我们写几个方法用来计算最简多项式返回最简多项式。然后剩下的就交给递归和可靠的JVM就行。似乎也没有想象的那么难？</p>
<p>存储多项式更简单。每个多项式是由若干个单项式构成的。而单项式只有两个属性：系数和指数。这么简单的结构，写几个add, sub, mul, pow方法肯定也是轻轻松松信手拈来啦。</p>
<p>需要注意的是，在多项式的计算中要注意合并同类项，而合并同类项意味着查找同类项，意味着查找，意味着搜索。因此可以用一个指数到系数的HashMap来存储单项式，加速查找过程。</p>
<p>输出嘛…就输出呗。都写到这了还不会输出？</p>
<blockquote>
<p>问题 6：有无优化空间？结构能否再清晰？</p>
</blockquote>
<ul>
<li><p>正的第一个输出可以不输出符号</p>
</li>
<li><p>快速幂？输入最高八次方，快速幂快不了多少…</p>
</li>
<li><p>一次方别输出，系数为1的正整数幂不用输出系数。</p>
</li>
<li><p>建立因子接口</p>
</li>
<li><p>建立多项式类和单项式类（可扩展性）</p>
</li>
</ul>
<h4 id="最终设计"><a href="#最终设计" class="headerlink" title="最终设计"></a>最终设计</h4><h5 id="类说明"><a href="#类说明" class="headerlink" title="类说明"></a>类说明</h5><table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">类型</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Main</td>
<td align="center">类</td>
<td align="center">主函数，功能不必多说</td>
</tr>
<tr>
<td align="center">Token</td>
<td align="center">类</td>
<td align="center">表示将表达式预处理后的基本单位，如括号，常数等</td>
</tr>
<tr>
<td align="center">Lexer</td>
<td align="center">类</td>
<td align="center">分词类。其主要属性为一个 <code>Token</code> 的 <code>ArrayList</code></td>
</tr>
<tr>
<td align="center">Parser</td>
<td align="center">类</td>
<td align="center">根据 <code>Lexer</code> 解析表达式</td>
</tr>
<tr>
<td align="center">Expr</td>
<td align="center">类</td>
<td align="center">表示表达式（因子）</td>
</tr>
<tr>
<td align="center">Term</td>
<td align="center">类</td>
<td align="center">表示项</td>
</tr>
<tr>
<td align="center">Factor</td>
<td align="center">接口</td>
<td align="center">表示因子</td>
</tr>
<tr>
<td align="center">VarFactor</td>
<td align="center">类</td>
<td align="center">表示变量因子</td>
</tr>
<tr>
<td align="center">NumFactor</td>
<td align="center">类</td>
<td align="center">表示常量因子</td>
</tr>
<tr>
<td align="center">Simple</td>
<td align="center">类</td>
<td align="center">表示多项式</td>
</tr>
</tbody></table>
<h5 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h5><p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U1/hw1_uml.png" alt="hw1_uml"></p>
<h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h5 id="方法复杂度"><a href="#方法复杂度" class="headerlink" title="方法复杂度"></a>方法复杂度</h5><p>（方法很多，我只选取了其中比较复杂的几个方法。下同）</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U1/hw1_method_complexity.png" alt="hw1_method_complexity"></p>
<p>可以看到复杂度最高的是Lexer，因为Lexer中需要用到大量的 <code>if-else</code> 语句来判断 <code>Token</code> 的类型。 <code>parseFactor</code> 同理。单项式的乘法对于0的特判多一点。在本次作业中固然不需要这么多的0特判，但是我希望如果单独把单项式的乘法方法拎出来放到Junit Test中进行测试，这个方法也能符合我的预期要求。toString方法复杂的原因是需要寻找第一个正数进行优化。但是实际上我应该写一个方法来完成这个任务的。</p>
<h5 id="类复杂度"><a href="#类复杂度" class="headerlink" title="类复杂度"></a>类复杂度</h5><p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U1/hw1_class_complexity.png" alt="hw1_class_complexity"></p>
<p>Parser类复杂度高很大程度上是因为方法的内部聚合度太高。我在第二次作业中成功降低了Parser的复杂度。Simple的复杂度高是一件没有办法的事。Simple类表示最简多项式，其内部有几个算术运算方法，复杂度自然高。</p>
<h4 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h4><p>很快，但是还能更快。我加了多变量处理，所以慢一点点。但这为可扩展性留了条路。</p>
<h4 id="互测经验"><a href="#互测经验" class="headerlink" title="互测经验"></a>互测经验</h4><p>hw1 还算比较轻松，由正好被分到了零房，所以几乎没有遇到什么bug。说一下舍友的bug。</p>
<ol>
<li><code>(2)^32</code> 错误在于把 <code>BigInteger</code> 转成了 <code>Integer</code> 再与零比较，如果是零就表明这个 <code>BigInteger</code> 是零。想必错误的人没有怎么看过 <code>BigInteger</code> 的库函数。错误输出为 <code>0</code> ，因为强转为 <code>Integer</code> 后确实等于0。</li>
<li>第二个错误原因太呆了。简单来说就是 <code>HashMap</code> 的迭代器是不保证有序的，尽管它在很多时候看起来是有序的。错误的同学把它当成有序的了，导致在一些奇怪的样例上得到了错误的输出。</li>
</ol>
<h3 id="第二次作业"><a href="#第二次作业" class="headerlink" title="第二次作业"></a>第二次作业</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>题目进行了小改动，未改动的地方没有列出来。自定义函数也没有列出来。</p>
<ul>
<li>变量因子 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> 幂函数 | 指数函数 | 自定义函数<strong>调用</strong></li>
<li>指数函数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> ‘exp’ 空白项 ‘(‘ 空白项 因子 空白项 ‘)’ [空白项 指数]</li>
<li>自定义函数调用 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> 自定义函数名 空白项 ‘(‘ 空白项 因子 空白项 [‘,’ 空白项 因子 空白项 [‘,’ 空白项 因子 空白项]] ‘)’<br>输出要求：exp函数内必须是项，但是必须无多余括号</li>
</ul>
<h4 id="数据限制-1"><a href="#数据限制-1" class="headerlink" title="数据限制"></a>数据限制</h4><ul>
<li>指数不能超过8，但是可以不断嵌套。不保证指数不会爆 <code>int</code> （事实上它确实爆了）</li>
<li>保证自定义函数的定义表达式中没有其他自定义函数在内。</li>
</ul>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><blockquote>
<p>问题 7：有哪些改动？</p>
</blockquote>
<p>进行迭代的第一步设计就是考虑项目的哪些地方需要进行改动。按照我的实现，在第二次作业中需要大改的地方大概有：</p>
<ol>
<li>变更单项式的数据结构，因此需要变更多项式的数据结构，<strong>重构多项式</strong>属性方法，引入单项式类使设计模块化层次化。</li>
<li><strong>引入自定义函数类</strong>，可能由多个类共同实现自定义函数功能需求。</li>
<li>引入读取自定义函数的相关模块代码。<br>小改的地方有：</li>
<li>扩展<code>Token</code> 和 <code>Token.Type</code> 。</li>
<li>扩展<code>Lexer</code> 。</li>
<li>扩展<code>Parser</code> 使之能够解析自定义函数和指数函数。</li>
</ol>
<p>我在实现第二次作业的要求的过程中进行了一次小迭代开发——先处理对 <code>exp</code> 函数的表达式的计算化简，再进行了自定义函数的读入。这样做有两个好处：</p>
<ol>
<li>可以通过对第一个部分debug保证一部分已经正确，再处理第二部分。而不需要在全部内容写完后对着庞大的项目debug</li>
<li>第一次作业和第二次作业的输入格式不同。先处理 <code>exp</code> 还可以小改一下第一次作业的评测机接着用，而不用新写一个评测机。<br>先看引入 <code>exp</code> 后的单项式和多项式怎么存储。</li>
</ol>
<blockquote>
<p>问题 8：如何存储单项式和多项式？需要注意什么？</p>
</blockquote>
<p>多项式的实现是简单的——多项式就是很多的单项式。如果需要的话，还可以往多项式中引入单项式之间的运算关系。我个人觉得不必要，因此省略。</p>
<p>单项式的实现也是简单的，单项式只有三个属性：系数，指数和 <code>exp</code> 函数中的多项式。</p>
<p>注意，这里面有一个小问题：循环定义。</p>
<blockquote>
<p>问题 9：多项式属性包括单项式，单项式属性有多项式，这种循环定义如何结束？</p>
</blockquote>
<p>我们之所以这样定义，是因为我们有需要这样定义的需求。因此得到循环定义的边界，就要回到这种看似无法停止循环的奇怪需求中。我们之所以这样定义，是因为 <code>exp</code> 中确实有多项式，但是这个多项式中并不一定有 <code>exp</code> 的因子。所以解决循环定义实际上很简单：让没有 <code>exp</code> 项的单项式中的多项式属性为空就行——这个空不一定是 <code>null</code> ，也可以是一个没有单项式的多项式对象。（但一定不能是零单项式，否则这种定义就停不下来了！）</p>
<p>定义解决了，下面分析多项式和单项式的计算。计算方法和第一次作业没有太大区别，但是需要着重注意的是判断同类项变复杂了。简单来说，需要递归判断同类项。</p>
<blockquote>
<p>问题 9：判断同类项？判断多项式相等？</p>
</blockquote>
<p>判断同类项是多项式和单项式运算的关键——指数由乘法实现，乘法由加法实现，而加法除了拷贝以外就是合并同类项了。可见判断同类项是多项式运算的基础。</p>
<p>解决方法不难。我们需要给单项式类定义两个方法：<code>similarTo()</code> 和 <code>equalTo()</code> ，在给多项式定义一个 <code>equalTo()</code> 方法。然后把它们全部写完就好。基本上只要自己写一遍就知道怎么办了。</p>
<p>此外， <code>Z boy</code> 等同学还提出了一个方法用来检查多项式和单项式是否相等，即判断相减之后是否为零。这在后续评测过程中有大作用，因为判断两个多项式是否相等的方法并不是带入数值——这样很容易TLE判断不出来——而是将两个多项式用数学运算的方式对扣，如果结果为0就说明正确。</p>
<p>此外多项式和单项式还需要注意的一点是需要及时把系数为零的单项式剔除掉——不剔除掉也可以，但是特判的地方会更多，冗余的数据也更多。</p>
<blockquote>
<p>问题 10：自定义函数处理？</p>
</blockquote>
<p>自定义函数处理是第二次作业的关键所在。调用自定义函数就是用实际参数（arguments）替换形式参数（parameters）。但是究竟如何实现替换？一般来说有两种实现方法：</p>
<ol>
<li>字符串替换</li>
<li>对象替换</li>
</ol>
<p>前者视函数为字符串，认为形式参数就是字符，调用只需要用实参的字符串取代形参的字符就行；后者视函数为表达式对象，认为形参是一个变量因子，调用只需要用解析好的实参因子取代变量因子就行。</p>
<p>虽然没有调查，但是我相信多数人使用的是字符串替换。我个人没有采用字符串替换，但是个人认为字符串替换需要注意两点：</p>
<ol>
<li>先换 <code>x</code> ，或者一次把多个参数替换掉。</li>
<li>函数嵌套需要循环以下步骤：<ol>
<li>parse</li>
<li>获取实参的String</li>
<li>替换</li>
<li>检查实参有没有嵌套函数。有则重复以上步骤。<br>我没有使用字符串替换，主要原因是觉得这个方法太奇怪了。试想如果别人问你你的项目中是怎么存储函数这个对象的，回答居然是用字符串存储？！我接受不了，我也不认为这是写一个多项式展开的项目应该有的思想。因此我使用了第二种方法，将实参作为因子对象替换函数表达式中的变量因子。</li>
</ol>
</li>
</ol>
<p>对象替换有几点需要注意：</p>
<ol>
<li>替换时需要深拷贝一遍函数定义表达式，不然函数定义的表达式就被污染了。</li>
<li>如果后续处理的时候会对实际参数进行修改，那么实际参数也需要深拷贝。</li>
</ol>
<p>从复杂度上来说，两种方法应该是差不多的。前者循环遍历建立表达式，后者递归深拷贝建立表达式。都把函数表达式遍历了一遍。</p>
<p>解决了自定义函数的大致处理思路，接下来需要关注的是自定义函数的具体实现。</p>
<blockquote>
<p>问题 11：如何存储函数？如何调用函数？</p>
</blockquote>
<p>在我的实现中，我写了两个类去管理函数。第一个是函数定义类（<code>FuncDef</code>）。这个类的核心属性是一个表达式对象，也就是一棵AST。第二个函数类是用来管理所有函数的（<code>FuncCall</code>），因此我引入了单例模式保证它只需要被实例化一次。 <code>FuncCall</code> 类最主要的功能是传入函数名称和实际参数，返回一个表达式，表示实参代入函数之后的结果。你看，我在描述 <code>FuncCall</code> 更多是注重描述它的功能——也就是这个类从外部去观测时是个什么样子。我个人认为这样新增函数比较方便，调用起来也十分舒适。</p>
<blockquote>
<p>问题 12：浅拷贝？深拷贝？</p>
</blockquote>
<p>深拷贝和浅拷贝是一个让我很头疼的问题，我也并没有实现的非常完美。但是经过第二次作业后，在多项式和单项式中，我对深拷贝和浅拷贝有一点思考。</p>
<p>我的多项式和单项式参照了 <code>BigInteger</code> 类的相关方法，但是由于我的单项式对象在创建后可以被修改，我放弃了。我认为在单项式和多项式对象中，一经构造，就不应当修改对象的值。每一次调用 <code>add</code> 等方法应当构造一个新的对象返回。</p>
<p>一切都解决了，剩下就看优化了。</p>
<blockquote>
<p>问题 13：输出优化？</p>
</blockquote>
<p>我为单项式类写了一个 <code>optimize()</code> 方法，返回一个新的输出更短的单项式。之所以这么写，有几种原因：</p>
<ol>
<li>我只需要将所有出现过单项式的 <code>mono.toString()</code> 方法改成 <code>mono.optimize().toString()</code> 就可以正确完成优化后的输出了，而在我的设计里 <code>mono.toString()</code> 只出现过一次。因此改动起来比较简单。</li>
<li>如果设计时间真的赶不上第二次作业的DDL，我可以不调用 <code>optimize()</code> 方法，相当于把优化前和优化后的输出分离开了。</li>
</ol>
<p>关于能否得到最优输出这件事上，原本以为还是像第一次作业一样可以轻松拿满。但是看到了 <code>J boy</code> 在群里的发言，发现事情似乎不简单。经过与舍友的讨论，个人认为将长度为n的表达式输出成最短多项式是一个NP问题。得到最短输出并不困难，但是当系数增大时验证最短输出，我认为是一件非常困难的事情。</p>
<p>举例：</p>
<p>$$<br>\begin{align*}<br>&amp;exp((2<em>x</em>exp(x^2) + 2<em>exp(x) + 2</em>x^2 + 2<em>exp(x</em>exp(x)) + 3<em>x))  \nonumber    \<br>=&amp;exp((x</em>exp(x^2) + exp(x) + x^2 + exp(x<em>exp(x)) + x))^2 * exp(x)<br>\end{align</em>}<br>$$</p>
<p>另外一个例子，本质是拆成 <code>0</code> 和 <code>4</code> ，只不过 <code>0</code> 和后面的相加消掉了。</p>
<p>$$<br>\begin{align*}<br>&amp;exp((4+100000+200000<em>x+300000</em>x^2+400000<em>exp(1))) \nonumber \<br>=&amp;exp(4)<em>exp((1+2</em>x+3</em>x^2+4<em>exp(1)))^{100000}<br>\end{align</em>}<br>$$</p>
<p>当系数增大的时候，不难想象还有更离谱的。系数分解的可能数太多了。据说 <code>L Boy</code> 完成了最离谱的优化并据说拿了满分。</p>
<p>具体来说，我做的优化大概有这么几点：</p>
<ol>
<li>如果 <code>exp</code> 只有一个单项式且这个单项式不是一个常数，那么提出常数的绝对值这个因子到外边一定不会更糟糕。</li>
<li>如果有多个单项式并且这些单项式系数（的绝对值）的最大公因数（记为 <code>gcd</code> ）还不小，我们可以遍历 <code>gcd</code> 的所有因数来验证提出公因数后的新的输出会不会更优。</li>
<li>实际上，第二步只需要遍历 <code>(gcd/1), (gcd/2), (gcd/3)...(gcd/9)</code> 这最多九个因数就行。因为第二步一定会有不止一个单项式，除以 <code>10</code> 或者更大的数就亏了。<br>此外还加上了第一次作业的优化，即正数要放在最前面不加正号。</li>
</ol>
<blockquote>
<p>问题 14：反思？更好的设计？</p>
</blockquote>
<ol>
<li>单项式类和多项式类高度耦合，这样做并不好，只是我想不到更好的方法了。</li>
<li>优化时方法写得太乱了，没有贯彻 java 的模块化层次化的思想。</li>
<li>深拷贝用的太多了。正确的方式是让多项式和单项式一经实例化就不可更改，<strong>使之成为不可变对象</strong>。过多深拷贝导致运算速率大大降低，目测在第一次作业性能的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="2.595ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 1147.1 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(396.8,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><rect width="907.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container> 到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container> 。这是一件很糟糕的事情。之后绝对不应该轻易改变一个类的属性。</li>
</ol>
<h4 id="最终设计-1"><a href="#最终设计-1" class="headerlink" title="最终设计"></a>最终设计</h4><h5 id="类说明-1"><a href="#类说明-1" class="headerlink" title="类说明"></a>类说明</h5><table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">类型</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Main</td>
<td align="center">类</td>
<td align="center">主函数，功能不必多说</td>
</tr>
<tr>
<td align="center">Token</td>
<td align="center">类</td>
<td align="center">表示将表达式预处理后的基本单位，如括号，常数等</td>
</tr>
<tr>
<td align="center">Lexer</td>
<td align="center">类</td>
<td align="center">分词类。其主要属性为一个 <code>Token</code> 的 <code>ArrayList</code></td>
</tr>
<tr>
<td align="center">Parser</td>
<td align="center">类</td>
<td align="center">根据 <code>Lexer</code> 解析表达式</td>
</tr>
<tr>
<td align="center">Expr</td>
<td align="center">类</td>
<td align="center">表示表达式（因子）</td>
</tr>
<tr>
<td align="center">Term</td>
<td align="center">类</td>
<td align="center">表示项</td>
</tr>
<tr>
<td align="center">Factor</td>
<td align="center">接口</td>
<td align="center">表示因子</td>
</tr>
<tr>
<td align="center">VarFactor</td>
<td align="center">类</td>
<td align="center">表示变量因子</td>
</tr>
<tr>
<td align="center">NumFactor</td>
<td align="center">类</td>
<td align="center">表示常量因子</td>
</tr>
<tr>
<td align="center">ExpFactor</td>
<td align="center">类</td>
<td align="center">指数函数因子</td>
</tr>
<tr>
<td align="center">Poly</td>
<td align="center">类</td>
<td align="center">表示多项式</td>
</tr>
<tr>
<td align="center">Mono</td>
<td align="center">类</td>
<td align="center">表示单项式</td>
</tr>
<tr>
<td align="center">FuncCall</td>
<td align="center">类</td>
<td align="center">表示函数调用类。其主要属性为函数名到函数定义类的 <code>HashMap</code></td>
</tr>
<tr>
<td align="center">FuncDef</td>
<td align="center">类</td>
<td align="center">表示函数定义</td>
</tr>
</tbody></table>
<h5 id="UML类图-1"><a href="#UML类图-1" class="headerlink" title="UML类图"></a>UML类图</h5><p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U1/hw2_uml.png" alt="hw2_uml"></p>
<h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h5 id="方法复杂度分析"><a href="#方法复杂度分析" class="headerlink" title="方法复杂度分析"></a>方法复杂度分析</h5><p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U1/hw2_method_complexity.png" alt="hw2_method_complexity"></p>
<p>可以看到，复杂度最高的方法是寻找最优公因子的优化方法和单项式的 <code>toString</code> 方法，其认知复杂度最高。当时一个小时出头飞速写完，再花了一个小时 debug ，思路都想好了，但是代码结构方面属实没有怎么构思。但是两个方法以外有大量的方法的圈复杂度太高。说白了就是特判的 if 语句太多，应该把接口做得更好，少一点 if 多一点 for 。</p>
<h5 id="类复杂度分析"><a href="#类复杂度分析" class="headerlink" title="类复杂度分析"></a>类复杂度分析</h5><p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U1/hw2_class_complexity.png" alt="hw2_class_complexity"></p>
<p>可以看到单项式和多项式类的方法复杂度几乎要爆炸了，毕竟我为它们实现了很多的运算方法，并尽可能参考 <code>BigInteger</code> 标准库为他们写基本方法。而 <code>Lexer</code> 和 <code>Parser</code> 的复杂度是我感到惊讶的。我特地将 <code>Lexer</code> 和 <code>Parser</code> 的方法中case类似的语句中的内容进行拆解以提高可读性，因此我认为 <code>Lexer</code> 和 <code>Parser</code> 的复杂度应该不是大问题。</p>
<p>下面着重分析一下多项式类和单项式类的复杂度：</p>
<p>先是看看多项式类的80的WMC是怎么出来的。在这80点WMC中，有近40点是四个方法：多项式加减（<code>add</code> <code>sub</code>）、多项式是否是因子（<code>isFactor</code> ）和多项式的最佳公因数是多少（ <code>bestCommonDivisor</code> ）。学习了别人的架构之后，我认为多项式加减的复杂度主要来源于零单项式的特判；在判断多项式是否是因子的时候需要进行大量特判，在这方面我不认为可以化简；在求解最佳公因子时，使用单个方法完成多个情况的优化会使得这个方法的复杂度爆炸。可以将不同情况的处理转化为私有方法，增强代码可读性。</p>
<p>再观测单项式类的WMC复杂度。令我头疼的一点是：单项式类的复杂度并不是因为某几个方法过于复杂，而是单纯因为方法太多了。其中圈复杂度大于5的只有两个方法：判断同类项方法（ <code>similarTo</code>）和 <code>toString</code> 方法。后者可以直接将特殊情况封装为私有方法解决，但是前者的高复杂度来源于单项式和多项式数据结构的缺陷：零多项式的特判导致代码冗余。</p>
<h4 id="性能分析-1"><a href="#性能分析-1" class="headerlink" title="性能分析"></a>性能分析</h4><p>深拷贝太多导致性能太差，不过相比房间里其他同学，个人感觉自己的性能还不算太差，估计是因为深拷贝和情况特判导致时间复杂度的常数因子过大，导致运行时间长。但是复杂度的量级应该还是正常的。</p>
<h4 id="互测经验-1"><a href="#互测经验-1" class="headerlink" title="互测经验"></a>互测经验</h4><p>目测有这么几种错误：</p>
<ol>
<li><code>0; exp(4294967297)</code> 用 <code>Integer.parseInt()</code> 读入再转 <code>BigInteger</code> 。估计也是没怎么了解 <code>BigInteger</code> 库，或者是迭代着迭代着忘记自己以前写的东西了。</li>
<li><code>0; 1-1</code> 第一次作业弱测第三个点，应当输出 <code>0</code> ，实际输出空串 <code> </code> ，第二次作业弱测没有这种简单的点了。错得有点呆。</li>
<li><code>exp((-x))</code> 错误输出为 <code>exp(-x)</code> ，估计是当系数绝对值为1并且后面只有一个 <code>x</code> 或者一个 <code>exp</code> 时默认不输出括号。</li>
<li><code>exp(1)^2 * exp(2)</code> 非常非常奇怪的错误。他会先把单项式加入一个 <code>HashMap</code> ，然后再遍历 <code>HashMap</code> 相乘。错在 <code>exp(1)^2</code> 和 <code>exp(2)</code> 在单项式上是相等的，标准库默认 <code>HashMap</code> 已经有一个项之后就不会再放一个相同的项了。所以错误输出成了 <code>exp(2)</code> </li>
<li><code>exp(2000000014*x + 5000000035)</code> 出错的人找出了最大公因数 <code>1000000007</code> ，然后线性遍历了它的所有的因子找出所有的因数用来验证提出来后是否会更短。线性遍历了所有因子……这是一个十位数的质数啊……出错原因 TLE</li>
</ol>
<h3 id="第三次作业"><a href="#第三次作业" class="headerlink" title="第三次作业"></a>第三次作业</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><ul>
<li>加入求导因子。现在可以导了！</li>
<li>自定义函数可以由已定义的自定义函数定义。</li>
</ul>
<h4 id="数据限制-2"><a href="#数据限制-2" class="headerlink" title="数据限制"></a>数据限制</h4><ul>
<li>保证自定义函数中不会出现求导因子。</li>
</ul>
<blockquote>
<p>问题 15：有哪些改动？</p>
</blockquote>
<p>准确来说，这次作业几乎没有改动。</p>
<ul>
<li>求导方面，我为单项式类和多项式类各添加了一个 <code>diff</code> 方法，返回自身求导之后的结果就行。</li>
<li>自定义函数方面，由于我在读入函数的过程中就对函数进行了解析，而解析的过程中会顺带着把已经定义的函数一块解析了，所以自定义函数几乎没有任何改动。</li>
<li>优化方面，已经摆烂了。在我自己的设计中，如果要优化就得动手术，不甚好。</li>
</ul>
<blockquote>
<p>问题 16：有无优化？</p>
</blockquote>
<p>其实第二次作业 <code>J boy</code> 就已经想出逆天优化了。他们真的把 <code>exp</code> 中的数拆开提公因子了，导致强测第13个数据点长了一个字符。阅读 <code>L Boy</code> 的帖子之后，思路大概是这样的。</p>
<ol>
<li>首先一般只会多提一个 <code>exp</code> 出来，提两个 <code>exp</code> 说明里面缩短的长度至少 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.312ex" role="img" focusable="false" viewBox="0 -540 778 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g></g></g></svg></mjx-container> 10，而这在一般情况下不太可能发生。</li>
<li>如果只提一个 <code>exp</code> 出来，就只需要拆解一项即可。而且拆解出来的两项中的一项应该是原本算出的 <code>gcd</code> 的倍数（如果可以的话应该还可以把另外几个数的 <code>gcd</code> 算出来）。如果拆成了，那就更新表达式。如果被拆成就继续拆，只要设置一个优化上限（一个全局变量不断递增或者设置时间）就能保证不会超时了。</li>
</ol>
<h4 id="最终设计-2"><a href="#最终设计-2" class="headerlink" title="最终设计"></a>最终设计</h4><h5 id="类说明-2"><a href="#类说明-2" class="headerlink" title="类说明"></a>类说明</h5><table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">类型</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Main</td>
<td align="center">类</td>
<td align="center">主函数，功能不必多说</td>
</tr>
<tr>
<td align="center">Token</td>
<td align="center">类</td>
<td align="center">表示将表达式预处理后的基本单位，如括号，常数等</td>
</tr>
<tr>
<td align="center">Lexer</td>
<td align="center">类</td>
<td align="center">分词类。其主要属性为一个 <code>Token</code> 的 <code>ArrayList</code></td>
</tr>
<tr>
<td align="center">Parser</td>
<td align="center">类</td>
<td align="center">根据 <code>Lexer</code> 解析表达式</td>
</tr>
<tr>
<td align="center">Expr</td>
<td align="center">类</td>
<td align="center">表示表达式（因子）</td>
</tr>
<tr>
<td align="center">Term</td>
<td align="center">类</td>
<td align="center">表示项</td>
</tr>
<tr>
<td align="center">Factor</td>
<td align="center">接口</td>
<td align="center">表示因子</td>
</tr>
<tr>
<td align="center">VarFactor</td>
<td align="center">类</td>
<td align="center">表示变量因子</td>
</tr>
<tr>
<td align="center">NumFactor</td>
<td align="center">类</td>
<td align="center">表示常量因子</td>
</tr>
<tr>
<td align="center">ExpFactor</td>
<td align="center">类</td>
<td align="center">指数函数因子</td>
</tr>
<tr>
<td align="center">DiffFactor</td>
<td align="center">类</td>
<td align="center">表示微分因子</td>
</tr>
<tr>
<td align="center">Poly</td>
<td align="center">类</td>
<td align="center">表示多项式</td>
</tr>
<tr>
<td align="center">Mono</td>
<td align="center">类</td>
<td align="center">表示单项式</td>
</tr>
<tr>
<td align="center">FuncCall</td>
<td align="center">类</td>
<td align="center">表示函数调用类。其主要属性为函数名到函数定义类的 <code>HashMap</code></td>
</tr>
<tr>
<td align="center">FuncDef</td>
<td align="center">类</td>
<td align="center">表示函数定义</td>
</tr>
</tbody></table>
<h5 id="UML类图-2"><a href="#UML类图-2" class="headerlink" title="UML类图"></a>UML类图</h5><p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U1/hw3_uml.png" alt="hw3_uml"></p>
<h4 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h5 id="方法复杂度分析-1"><a href="#方法复杂度分析-1" class="headerlink" title="方法复杂度分析"></a>方法复杂度分析</h5><p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U1/hw3_method_complexity.png" alt="hw3_method_complexity"></p>
<p>第三次作业的复杂度相较第二次作业并没有明显的改动。这里不多赘述。</p>
<h5 id="类复杂度分析-1"><a href="#类复杂度分析-1" class="headerlink" title="类复杂度分析"></a>类复杂度分析</h5><p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U1/hw3_class_complexity.png" alt="hw3_class_complexity"></p>
<p>第三次作业的类复杂度相较第二次作业几乎完全没有改动，这里不再赘述。</p>
<h4 id="性能分析-2"><a href="#性能分析-2" class="headerlink" title="性能分析"></a>性能分析</h4><p>和第二次作业一样，还是过度深拷贝和过度0特判导致程序性能大打折扣。虽然在第二次作业已经遇到这类问题了，但是还是不想给程序动手术重构。多项式和单项式两个文件就占了总代码量的一半。</p>
<h4 id="互测经验-2"><a href="#互测经验-2" class="headerlink" title="互测经验"></a>互测经验</h4><p>第三次互测有点难顶，愣是一个都没有测出来。bug大概有两种：</p>
<ol>
<li><code>exp(-exp(x))</code> <strong>输出格式错误。</strong> 和 <code>exp(-x)</code> 错的差不多吧。DPO居然没测出来。”看来核心技术（测评技术）还是要掌握在自己手里。“（by 第二位 <code>L Boy</code> ）<strong>许多同学的评测机都没法评测输出结果，因为大家都懒。卡格式错误很容易刀到别人。</strong></li>
<li>第二种bug就难顶了。在拿到别人的代码进行测试的时候我就知道肯定有因为算法太差导致运行时间太慢进而导致出现超时的错误，但是有一说一真的构造不出低 <code>Cost</code> 的数据使得运行时间超过 <code>2</code> 秒。看了一下房间里其他人的hack数据，他们构造了<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="48.485ex" height="2.565ex" role="img" focusable="false" viewBox="0 -883.9 21430.6 1133.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1092,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1481,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1947,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(2519,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(3022,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3411,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3877,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(4449,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(4952,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5341,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(5807,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6379,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(6882,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7271,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(7737,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(8309,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(8812,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(9201,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(9667,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(10239,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(10742,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(11131,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(11597,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(12169,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(12672,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(13061,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(13527,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(14099,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(14602,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(14991,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(15457,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(16029,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(16532,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(16921,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(17929.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(18318.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(18707.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(19096.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(19485.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(19874.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(20263.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(20652.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(21041.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container><br>组里的一些同学 TLE 了。<br>甚至还有更离谱的：<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">g(z)=exp(exp(exp(exp(z))))</span><br><span class="line">f(y)=exp(exp(exp(exp(g(y)))))</span><br><span class="line">f(x)*g(x)-f(x)*f(exp(exp(exp(exp(x^8)))))</span><br></pre></td></tr></table></figure></div>
水群里更有甚者：<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">g(z)=exp(exp(exp(z)))</span><br><span class="line">f(y)=exp(exp(exp(g(y))))</span><br><span class="line">h(x)=exp(exp(exp(f(x))))</span><br><span class="line">h(f(g(exp(exp(exp(exp(x^8)))))))</span><br></pre></td></tr></table></figure></div>
展开后有22层exp。 <code>Cost</code> 目测不超过1000。本人运行时间不超过一秒。组内一些代码运行时间不低于十分钟。我研究了一下这个问题。</li>
</ol>
<p>看了一下被hack的天权星，设计者<strong>保留了太多不必要的因子（比如一个exp(x)会被拆成四个因子： <code>x^0</code> <code>1</code> <code>exp(0)</code> <code>exp(x)</code> ，而且有意思的是 <code>1</code> 和 <code>exp(0)</code> 会反复横跳相互转换）</strong>，而这些因子会被保留到表达式计算的最后一步才被化简（调用一个名为 <code>drop</code> 的方法将不必要的因子或项丢掉）。虽然没有细看代码，但是根据运行结果看来也是指数级的了。</p>
<p>另外一个 <code>bug</code> 是第三位 <code>L Boy</code> 分享的。在他的设计中，<strong>每一个 <code>exp</code> 的 <code>toString</code> 方法都包括调用两次 <code>exp</code> 自身里面因子的 <code>toString</code> 方法</strong>（尽管调用一次后存下来然后下次需要用的时候再用也可以，但是他并没有这么做。毕竟如果有一个八个字母组成的方法名称能解决的问题，何必在存一个临时变量呢）。每一层的两次调用导致顶层的 <code>toString</code>  变成了一个完美的二叉树，也就是一个完美的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.799ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2563.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1167,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2174.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 的时间复杂度，导致超时。这真的并不容易发现。</p>
<p>估计房间里的天衡星也犯了类似的错误。此外他和 <code>L Boy</code> 都是通过调用 <code>exp</code> 内部因子的 <code>toString</code> 方法来判断该 <code>exp</code> 内部的因子是否等于0（如果内部因子的字符串长度为0就说明内部因子等于0）。这是应该是为了 <code>exp(0)=1</code> 的优化而设计的算法。</p>
<p>这倒是给我了一个启示：想调用 <code>toString</code> 方法就别再 <code>toString</code> 方法里面化简表达式。如果不化简的话，哪需要判断是否为0呢？如果<strong>建立了抽象层次</strong>的话就不会想着在一个 <code>toString</code> 方法里面完成表达式的计算和输出两件事情了。</p>
<h2 id="四、Debug策略"><a href="#四、Debug策略" class="headerlink" title="四、Debug策略"></a>四、Debug策略</h2><p>本次迭代开发没有出现大bug，一些小bug已经忘得差不多了。因此我暂时省略了出现的bug。</p>
<p>整体Debug策略大概如下：</p>
<ol>
<li>有简单数据就按照简单的数据进行debug。这个应该不用多说，简单的数据往往能最直接地暴露问题。</li>
<li>没有简单的数据就把数据变简单，剥离出其中核心的让你出错的地方。</li>
<li>没有数据就捏造数据，需要构建评测机。但是考虑到个人搭建评测机实在是过于困难和费时，可以参考大佬的评测机进行魔改。</li>
</ol>
<p>debug注意事项：</p>
<ol>
<li><code>debug</code>一般情况下与运行结果一致，但是在一些特殊情况下不一致。目测导致这项改变的唯一<strong>原因是<code>toString</code>方法对<code>debug</code>的内容进行了修改</strong>。在<code>IDEA</code>中把<code>toString</code>方法关掉就行。一般来说如果 <code>toString</code> 方法对对象进行了修改，<code>IDEA</code>会在调试的过程中报一个<code>Warning</code>。</li>
<li><code>debug</code> <strong>可以采用由浅入深</strong>，类似二分搜索的方式进行<code>debug</code>。二分搜索的精髓之一在于先确定大范围，再一步步缩小包围圈，最终定位目标。由于<code>Java</code>的方法调用关系与二分查找的思想比较吻合，我们可以先找<code>MainClass</code> 的哪一步出现了问题，再查找 <code>MainClass</code> 中出问题的步骤中是哪一步出现了错误，层层深入，最终确定目标位置。利用步入和步过，仔细观察IDEA的堆栈，可以定位问题发生的位置、深度等信息；观察下方变量，可以确定当前位置的状态，判断当前是否异常。总的来说IDEA的调试能力还是很强大的。</li>
<li><strong>多交流！！！</strong> 自己犯的问题在很多情况下别人都犯过，只不过自己意识不到自己犯的错误就是别人犯的错误。</li>
<li>永远不要依赖数据点！永远要尝试自己构造数据！构造数据不是课程组的要求，却也是 OO 锻炼的能力之一。正所谓“核心技术还是要掌握在自己的手里”。</li>
<li><strong>在修复暴露的问题之前，先仔细想想是不是有类似的问题还没有暴露出来。</strong> 比如说这次迭代开发中，我曾经发现我的多项式相加写的有问题，但是却没有想起来多项式相减的代码是几乎照抄相加的代码的。导致同一个问题de了两次bug，浪费了不少时间。</li>
</ol>
<h2 id="五、心得体会"><a href="#五、心得体会" class="headerlink" title="五、心得体会"></a>五、心得体会</h2><h3 id="设计建议"><a href="#设计建议" class="headerlink" title="设计建议"></a>设计建议</h3><ol>
<li>自顶向下进行设计。先构思需要用到的类（从数据出发（比如多项式的数据结构）或者从功能出发（比如函数调用）），再进一步构思类需要用到的方法，再进一步构思方法需要处理的各种情况。具体理由虽然我说不上来，但是从数据结构和行为需求构建整体代码框架再深入细节在整体设计把握上真的有大好处。</li>
<li>虽然说先构思再动笔，但是实际情况可能是：<ol>
<li>完全没有思路；</li>
<li>构思了一大半，发现行不通；</li>
<li>完成构思，发现不会写代码；</li>
<li>写了一大半代码，发现行不通…<br> 个人认为这是非常非常常见的。比如在这第二次作业中，让我十分崩溃的事情是完成了多项式和单项式类的构思和基本代码，却发现单项式类有多项式对象作为属性，多项式类有单项式对象作为属性，循环定义直接把我整崩了。在遇到这种情况的时候，强烈建议<strong>多和同学交流架构设计</strong>，说不定你遇到的问题别人正好遇到了，说不定你眼中的难题在别人看来根本就不是事。</li>
</ol>
</li>
<li>不要依赖中测数据点。</li>
</ol>
<h3 id="迭代感想"><a href="#迭代感想" class="headerlink" title="迭代感想"></a>迭代感想</h3><p>这次迭代开发还有许多不完美的地方，一方面真的很想看一看大佬们的设计细节，另一方面自己已经开摆了www。</p>
<p>总的来说吧，这次的迭代开发真的非常非常地好。在上学期的先导课中，我一直在用自己熟悉的面向过程编程完成各个任务。但是经过了第一单元的迭代开发训练，我慢慢开始接受面向对象的编程思想了。在我拿到新一轮的迭代任务的时候，我会试着思考我需要扩展那些架构，实现哪些功能，试着去思考程序中的不同模块在外界看来应该满足什么样的要求。这是我认为我学到的最有价值的事情。</p>
<h2 id="六、课程建议"><a href="#六、课程建议" class="headerlink" title="六、课程建议"></a>六、课程建议</h2><p>首先，真心感谢用心的吴际老师和面向对象结构与设计的助教们！经过多年的完善，面向对象结构与设计课程在我看来是最能锻炼代码能力的一门课。课程的代码量不是越多越好，但是CS需要有代码量的课程！</p>
<p>在今年的OO课程中，我觉得有一个小的改进建议：在 OO 迭代开发中，一直很难找到一份比较好的代码示例：实验的代码虽然规范，但是实现的功能太简单了；研讨课的同学往往只会分析思路，而不会给出代码（毕竟这是课程组要求）。但是这样子就带来一个问题：究竟什么样的代码才是真正规范，真正好的代码呢？课程组固然给出了通过面向对象的量化分析手段来分析，但却并没有指导同学们如何系统地利用这种量化分析手段。我觉得可以抽个时间讲讲这些量化分析手段，比如一节研讨课的十五分钟时间。</p>
<p>为什么我对源码这么执着呢？因为即便实现思路相同，程序运行效果仍然可能大相径庭！我和某位 <code>Z Boy</code> 的实现思路大致相同，但是在执行 <code>(x+1)^1000</code> 时，我的程序的运行时间却是他的三倍！能解决这个问题只有看具体代码，因此规范代码是一件我认为很重要的事情，而且如果能让同学们在进厂打工之前接触到一些厂里的规范——哪怕只是毛皮——也是工程能力提升的很重要的一环。规范的代码不容易得到，一种我认为比较可行的办法是学习现有的规范的开源的代码。或是让同学们去阅读简单的规范的代码，或是将复杂的代码进行缩减和抽象。</p>
<p>但不过无法实现也没有关系。现在的 OO 课程已经非常非常良心了！</p>
]]></content>
      <categories>
        <category>OO</category>
      </categories>
      <tags>
        <tag>OO</tag>
      </tags>
  </entry>
  <entry>
    <title>「BUAA OS」操作系统假期预习</title>
    <url>/2024/03/03/OS/Pre/</url>
    <content><![CDATA[<h2 id="预习内容"><a href="#预习内容" class="headerlink" title="预习内容"></a>预习内容</h2><p>OS的假期预习发布时间远晚于 CO 的假期预习，将近开学才开放预习内容，正确的。</p>
<p>按照个人理解，假期预习大概就是理解这么几件事：</p>
<ol>
<li>学习使用<code>linux</code>和 linux 中基本的<code>GNU工具</code>，如<code>ls</code> <code>make</code> <code>vim</code>等等</li>
<li>学习一个标准一点的、系统一点的 MIPS 程序长什么样子</li>
<li>学习 C 语言是怎么被翻译成 MIPS 汇编，再翻译成二进制可执行文件，再跑起来的</li>
<li>学习使用 <code>GDB</code> 和 <code>QEMU</code></li>
</ol>
<p>一步步来。</p>
<h3 id="安装Linux"><a href="#安装Linux" class="headerlink" title="安装Linux"></a>安装Linux</h3><p>我安装的是<code>Ubuntu22.04</code>，使用<code>vmware workstation</code>运行。理由是配置比较白痴。同时我也在WSL上安装了<code>Ubuntu</code>。虽然还没弄明白wsl的图形化界面要怎么安装，但即便没有图形化界面，个人感觉使用体验要远好于<code>vmware</code>。</p>
<h4 id="本地代理"><a href="#本地代理" class="headerlink" title="本地代理"></a>本地代理</h4><p>wsl的开本地代理可以在本地的”C:\Users%USERNAME%.wslconfig”文件中进行配置完成。一般来说该文件不存在，需要自行创建。创建后向其中写入以下内容:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[experimental]</span><br><span class="line">autoMemoryReclaim=gradual</span><br><span class="line">networkingMode=mirrored</span><br><span class="line">dnsTunneling=true</span><br><span class="line">firewall=true</span><br><span class="line">autoProxy=true</span><br></pre></td></tr></table></figure></div>
<p>然后在命令行将wsl关掉：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; wsl --shutdown</span><br><span class="line">&gt; wsl</span><br></pre></td></tr></table></figure></div>
<p>如果打开wsl没有出现“NAT模式下不支持localhost”之类的文字就算成功了</p>
<p>在vmware的Ubuntu中进行本地代理则稍微有一点麻烦。我使用的是clash for windows进行联网，在Ubuntu中也可以启动本地代理通过windows的clash访问指定网站。</p>
<ol>
<li>先在windows下打开命令行，输入<code>ipconfig</code>，找到<code>无线局域网适配器 WLAN</code>下的<code>IPv4 地址</code></li>
<li>将clash中的<code>Allow LAN</code>打开，记录<code>Port</code>号。</li>
<li>在ubuntu的网络设置中选择<code>本地代理-手动</code>，将<code>https代理</code>、<code>http代理</code>、<code>Socks主机</code>三个选项的每一个都分别写入<code>IPv4 地址</code>以及<code>Port</code>号。随后就可以正常上网了</li>
</ol>
<h4 id="安装相关GNU工具"><a href="#安装相关GNU工具" class="headerlink" title="安装相关GNU工具"></a>安装相关GNU工具</h4><p>基本gcc工具</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential</span><br></pre></td></tr></table></figure></div>

<p>mips相关模拟开发工具</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc-mips-linux-gnu qemu-system-mips gdb-multiarch</span><br></pre></td></tr></table></figure></div>

<p>之后的作业如果遇到奇怪的报错可能还有一下其他的库没有装。这个到时候再说吧。</p>
<h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><p>我们直接看Makefile，这里参考了绿导师的makefile查看技巧。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ make -nB # 查看make命令都会执行哪些命令，并输出到标准输出（但是不执行这些命令）</span><br><span class="line">$ make run -nB # 查看make run命令都会执行哪些命令，并输出到标准输出（但是不执行这些命令）</span><br></pre></td></tr></table></figure></div>

<p><code>-n</code>和<code>-B</code>选项可以用<code>man make | vim -</code>来查看</p>
<p>对于make中眼花缭乱的指令，可以在vim中输入<code>:%s/ /\n  /g</code>命令来完成一种简单的formatting。</p>
<p>拿mips-exercise的makefile来说，</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># make</span></span><br><span class="line">mips-linux-gnu-gcc --std=gnu99 -EL -G 0 -mno-abicalls -fno-pic -ffreestanding -fno-stack-protector -fno-builtin -Wa,-xgot -Wall -mxgot -mno-fix-r4000 -march=4kc -g -ggdb -I./include/ -c -o hello.o hello.c</span><br><span class="line">mips-linux-gnu-gcc --std=gnu99 -EL -G 0 -mno-abicalls -fno-pic -ffreestanding -fno-stack-protector -fno-builtin -Wa,-xgot -Wall -mxgot -mno-fix-r4000 -march=4kc -g -ggdb -I./include/ -c -o output.o output.c</span><br><span class="line">mips-linux-gnu-gcc --std=gnu99 -EL -G 0 -mno-abicalls -fno-pic -ffreestanding -fno-stack-protector -fno-builtin -Wa,-xgot -Wall -mxgot -mno-fix-r4000 -march=4kc -g -ggdb -I./include/ -c -o start.o start.S</span><br><span class="line">mips-linux-gnu-ld -EL -G 0 -static -n -nostdlib --fatal-warnings -o hello -N -T linker.lds hello.o output.o start.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># make run</span></span><br><span class="line">qemu-system-mipsel -cpu 4Kc -m 64 -nographic -M malta -no-reboot  -kernel hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># make dbg</span></span><br><span class="line">make dbg_run &gt;/dev/null 2&gt;&amp;1 &amp; gdb-multiarch hello -ex <span class="string">"target remote localhost:1234"</span></span><br><span class="line">killall qemu-system-mipsel</span><br><span class="line"></span><br><span class="line"><span class="comment"># make clean</span></span><br><span class="line"><span class="built_in">rm</span> -rf *~ *.o hello *.objdump</span><br><span class="line"></span><br><span class="line"><span class="comment"># make dbg_run</span></span><br><span class="line">qemu-system-mipsel -cpu 4Kc -m 64 -nographic -M malta -no-reboot -s -S  -kernel hello</span><br></pre></td></tr></table></figure></div>
<p>可以发现：</p>
<ol>
<li>make就是简单的生成了一个hello的可执行文件。它忽略了标准库，使用静态链接，禁用内联函数和栈保护器，禁用对mips-r4000的修复。简单来说，这些编译操作都是为了保证我们写的程序能够在裸机上运行</li>
<li>使用<code>qemu-system-mipsel</code> 在4Kc, MIPS Malta Core运行了hello。在Debug的时候使用了-S选项让CPU在开始运行的时候停下来，使用-s指令在localhost:1234开启了一个gdbserver用于远程调试。</li>
<li>使用<code>gdb-multiarch</code>进行remote dbg，完成之后再干碎qemu进程。</li>
</ol>
<h3 id="观察运行情况"><a href="#观察运行情况" class="headerlink" title="观察运行情况"></a>观察运行情况</h3><p>gdb自带tui，能够方便地查看运行结果</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">(gdb) layout asm</span><br><span class="line">(gdb) layout src</span><br></pre></td></tr></table></figure></div>
<p>asm这可以将CPU从启动时的0xBFC00000开始执行的所有指令都显示出来，能够很好地观察到每一条指令的运行</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mips-linux-gnu-objdump -d hello | vim -</span><br></pre></td></tr></table></figure></div>
<p>将可执行文件hello反汇编来看到hello是怎么运行的。在asm的tui下也可以显示相同的内容。</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>「BUAA CO」P7总结</title>
    <url>/2024/01/02/CO/P7/</url>
    <content><![CDATA[<h2 id="主要任务"><a href="#主要任务" class="headerlink" title="主要任务"></a>主要任务</h2><ul>
<li>新增指令：<code>nop</code>, <code>mfc0</code>, <code>mtc0</code>, <code>eret</code>, <code>syscall</code></li>
<li>新增模块：<code>总线Bridge</code>, <code>CP0协处理器</code>, <code>Timer0</code>, <code>Timer1</code></li>
<li>新增功能：完成对五类异常和中断的响应</li>
</ul>
<h2 id="顶层设计"><a href="#顶层设计" class="headerlink" title="顶层设计"></a>顶层设计</h2><p><img lazyload="" src="/images/loading.svg" data-src="/images/CO/P7/CIRC.png" alt="P7_CIRC"></p>
<p>其中红色为转发有关设计，绿色为阻塞有关设计，蓝色为乘除有关设计，黄色为CP0有关设计或外设，浅绿色虚线内为CPU，粉色为Bridge。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>P7忘写设计文档Gap了一周…</p>
<p><strong>一定要写设计文档！！！</strong></p>
<h3 id="1-关于CP0及其实现"><a href="#1-关于CP0及其实现" class="headerlink" title="1. 关于CP0及其实现"></a>1. 关于CP0及其实现</h3><p>P7添加了协处理器CP0，实现了其中的<code>sr(state register)</code>, <code>cause</code>和<code>EPC</code>三个寄存器的一些位。<strong>未实现位需要保持0</strong>。<br>功能定义如下：</p>
<table>
<thead>
<tr>
<th align="center">Reg</th>
<th align="center">Byte</th>
<th align="center">Name</th>
<th align="center">Function</th>
</tr>
</thead>
<tbody><tr>
<td align="center">cause</td>
<td align="center">31</td>
<td align="center"><code>BD</code></td>
<td align="center">如果<code>CP0</code>所在级指令为延迟槽<br>指令就接入1，否则接0</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">15:10</td>
<td align="center"><code>IP/HWInt[5:0]</code></td>
<td align="center"><code>HWInt[5:3]</code>永远保持0；<br><code>Interrupt</code>信号接入<code>HWInt[2]</code><br><code>Timer1</code>的<code>IRQ</code>信号接入<code>HWInt[1]</code><br><code>Timer0</code>的<code>IRQ</code>信号接入<code>HWInt[0]</code></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">6:2</td>
<td align="center"><code>Exc_code</code></td>
<td align="center">如果发生异常或者中断，<br>则将对应的异常码写入</td>
</tr>
<tr>
<td align="center">sr</td>
<td align="center">15:10</td>
<td align="center"><code>IM</code></td>
<td align="center"><code>sr[i]</code>置1表示不对<code>HWInt[i]</code><br>的中断信号进行响应</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">1</td>
<td align="center"><code>EXL</code></td>
<td align="center">进入核心态时置1，<br>退出核心态时置0<br>置1时不响应异常中断</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">0</td>
<td align="center"><code>IE</code></td>
<td align="center">置1响应中断信号</td>
</tr>
<tr>
<td align="center">EPC</td>
<td align="center">31:0</td>
<td align="center"><code>epc</code></td>
<td align="center">写入<code>VPC</code>。需要注意延迟槽</td>
</tr>
</tbody></table>
<p>此外需要说明的是<code>cause</code>寄存器是不可写的。这意味着用户没发通过执行<code>mtc0</code>指令来修改<code>cause</code>指令。<code>cause</code>寄存器的写入是由硬件完成的。每个周期都需要对<code>cause</code>寄存器的[15:10]进行写入。</p>
<h3 id="2-关于新增指令"><a href="#2-关于新增指令" class="headerlink" title="2. 关于新增指令"></a>2. 关于新增指令</h3><p>新增指令会引入新的冒险。这主要发生在：</p>
<ol>
<li><code>eret</code>无延迟槽，D级跳转会产生控制冒险，需要清空延迟槽；或者F级跳转。</li>
<li><code>mtc0</code>和<code>eret</code>产生供需模型形成数据冒险，需要转发或者阻塞解决冒险。</li>
<li><code>mtc0</code>和<code>mfc0</code>与其他指令的冲突…</li>
</ol>
<h3 id="3-关于CPU和操作系统的界限"><a href="#3-关于CPU和操作系统的界限" class="headerlink" title="3. 关于CPU和操作系统的界限"></a>3. 关于CPU和操作系统的界限</h3><p>P7要实现的事情只有：</p>
<ol>
<li>翻译指令。</li>
<li>在需要响应中断或者发生异常的时候要能够正确跳转到<code>0x4180</code>的入口。</li>
<li>周期性写入<code>cause[15:10]</code>。</li>
</ol>
<p>比如，在异常或者中断的时候，我们只需要向<code>CP0</code>中写入对应的<code>VPC</code>和性质（比如是否是延迟槽）。至于要保存哪些寄存器值，根据指令性质不同执行差异化的异常中断响应代码，这些都不是我们需要考虑的，而是编写异常处理程序的程序员需要操心的事。</p>
<h3 id="4-关于中断及其对拍"><a href="#4-关于中断及其对拍" class="headerlink" title="4. 关于中断及其对拍"></a>4. 关于中断及其对拍</h3><h4 id="关于中断响应"><a href="#关于中断响应" class="headerlink" title="关于中断响应"></a>关于中断响应</h4><p>程序对中断的响应是通过许许多多的开关实现的。在上机中可能也会遇到添加许多开关，根据这些开关的状态决定是否执行对应程序的情况。<br>（待补充~）</p>
<h4 id="关于中断的对拍"><a href="#关于中断的对拍" class="headerlink" title="关于中断的对拍"></a>关于中断的对拍</h4><p>很不幸中断无法和<code>Mars</code>对拍。流水线CPU中时钟周期与指令周期是不相等的，而<code>Timer</code>的中断是根据时钟周期来定的；<code>Interrupt</code>信号是根据宏观<code>PC</code>和定，因此也无法得知<code>CPU</code>内部的阻塞情况。也就是说中断信号可以在任意一个时钟周期而非指令周期产生。<code>Mars</code>模拟的是<code>单周期CPU</code>的运行，与<code>流水线CPU</code>不同。此外哪怕是在不会产生冒险的汇编代码下用和<code>Mars</code>进行对拍，个人也观测到过官方<code>Mars</code>的鬼畜行为。</p>
<p>如果对自己的中断响应不放心的话，建议找一个设计相当的小伙伴进行对拍，以避免时钟周期不同。</p>
<h4 id="关于Timer"><a href="#关于Timer" class="headerlink" title="关于Timer"></a>关于Timer</h4><p>官方教程中对<code>Timer</code>有专门的文件进行规范，在2023秋的计算机组成课程中又提供了官方的Timer源代码，读懂以后实例化两个Timer即可。需要注意的是只有每个Timer中的三个寄存器只有俩可写，另一个只可读。另外就是<code>Timer</code>访问的字对齐问题。</p>
<h3 id="5-关于异常和异常优先级"><a href="#5-关于异常和异常优先级" class="headerlink" title="5.关于异常和异常优先级"></a>5.关于异常和异常优先级</h3><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>P7需要实现的异常有5种：<code>Adel</code> <code>Ades</code> <code>Overflow</code> <code>RI</code> <code>Syscall</code>。每一种异常在教程中已经写的十分详细了。</p>
<h4 id="跳转指令异常"><a href="#跳转指令异常" class="headerlink" title="跳转指令异常"></a>跳转指令异常</h4><ul>
<li>跳转指令不会因为PC不对齐或越界而成为受害指令，异常只会发生在跳转到的那条指令上。</li>
<li><code>beq``bne``jal</code>不会发生未字对齐的情况，只可能越界。</li>
<li><code>jr</code>可能未字对齐，也可能越界。</li>
</ul>
<h4 id="异常优先级"><a href="#异常优先级" class="headerlink" title="异常优先级"></a>异常优先级</h4><p>简单来说，就是先发生的异常产生的会顶替掉后发生的异常。比方说当指令取址异常和未知指令异常同时发生时，我们肯定会先考虑取址异常而非未知指令异常。除了从直观感觉来判断以外，可以通过流水线级来判断异常优先级，即在<strong>F级发生的异常 &gt; D级发生的异常 &gt; E级发生的异常 &gt; M级发生的异常</strong>。F级取址，D级译码，因此指令取址异常优先于未知指令异常。</p>
<h3 id="6-关于延迟槽"><a href="#6-关于延迟槽" class="headerlink" title="6.关于延迟槽"></a>6.关于延迟槽</h3><p>指令是否是延迟槽需要在F级进行判断，并进行流水。特例如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">div $t0, $t1</span><br><span class="line">beq $t0, $t1, TARGET</span><br><span class="line">mfhi $t0</span><br></pre></td></tr></table></figure></div>
<p><code>mfhi</code>会被阻塞在D级，因此等于或晚于D级进行判断都会使得延迟槽判断不准确。</p>
<p>指令是否是延迟槽是由上一条执行的指令决定的，也就是说这条指令的存储空间上的前一条指令是不是跳转指令，以及这条指令的下一级流水级是不是跳转指令都不能决定这条指令是不是延迟槽。</p>
<h3 id="7-关于空泡和宏观PC"><a href="#7-关于空泡和宏观PC" class="headerlink" title="7.关于空泡和宏观PC"></a>7.关于空泡和宏观PC</h3><p>流水线<code>CPU</code>应当保持宏观PC的连续性，因此空泡的<code>PC</code>不能随便选。一般来说，空泡的<code>PC</code>应当永远保持与下一条指令的<code>PC</code>一致：阻塞产生空泡的话就保持与被阻塞指令一致，<code>eret</code>清空延迟槽的空泡应当与EPC一致（如果是用清空延迟槽实现<code>eret</code>的话）。</p>
<p>将空泡的PC永远置成<code>32'h0000_3000</code>也是不行的。尽管程序在第一次运行<code>32'h0000_3000</code>处的指令时会因为没有将<code>EXL</code>置1而不对中断做出响应，但是之后可就不好说了。这样就会导致程序在某一个位置因为阻塞了一下使得<code>EPC</code>置<code>3000</code>。这可就坏事了。此外，空泡的<code>BD</code>也应当与下一条指令保持一致。</p>
<p>至于为什么空泡的<code>PC</code>不能和上一条指令一致呢？这是因为当上一条指令进入<code>CP0</code>所在级的下一级时，我们应当认为这条指令已经执行完了，这个时候异常中断的<code>VPC</code>就不应当发生在这条已经执行完的指令上（除非延迟槽指令<code>VPC-4</code>）——都执行完了怎么受害？</p>
]]></content>
      <categories>
        <category>CO</category>
      </categories>
      <tags>
        <tag>CO</tag>
        <tag>Verilog</tag>
        <tag>流水线CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>「BUAA OO」Unit-2 电梯调度</title>
    <url>/2024/03/31/OO/Unit-2/</url>
    <content><![CDATA[<h1 id="电梯"><a href="#电梯" class="headerlink" title="电梯"></a>电梯</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>考虑到第一次博客写的实在是太复杂，第六次作业的博客我希望能够按照更加清晰的结构来叙述我的设计。在这次博客中，我将解题思路单独叙述，再进一步叙述我的设计架构。</p>
<h2 id="二、题目背景"><a href="#二、题目背景" class="headerlink" title="二、题目背景"></a>二、题目背景</h2><p>重述题目，熟悉题目的话可以跳过这一部分。</p>
<h3 id="第五次作业"><a href="#第五次作业" class="headerlink" title="第五次作业"></a>第五次作业</h3><h4 id="1-题目背景"><a href="#1-题目背景" class="headerlink" title="1. 题目背景"></a>1. 题目背景</h4><ol>
<li>六部电梯</li>
<li>每部电梯单独工作</li>
<li>每个人只能等它指定的一部电梯</li>
<li>每部电梯最多承载六个人</li>
<li>每部电梯在一楼和十一楼往返运行</li>
<li>根据题意，每部电梯需要在每一层楼都能停留，即不能出现高低层电梯和奇偶层电梯这类电梯</li>
<li>每次上下一层楼花费0.4秒</li>
<li>开关门各0.2秒，从门开始打开到完全关闭期间，乘客可以随意进出</li>
<li>电梯没有加速度，纸片人不会被门夹</li>
<li>电梯就是神，只要愿意就可以随意吃人吐人</li>
<li>人可能在任意时间在任意楼层按电梯（具体什么时候在哪层楼取决于输入）</li>
<li>输入不能使得初始楼层和目标楼层相等</li>
</ol>
<h4 id="2-评价标准"><a href="#2-评价标准" class="headerlink" title="2. 评价标准"></a>2. 评价标准</h4><p>课程组提供了两个标准。一个是正确性评判标准，一个是性能评判标准</p>
<h5 id="正确性评判"><a href="#正确性评判" class="headerlink" title="正确性评判"></a>正确性评判</h5><ol>
<li>每个人最后都必须到达目标楼层。</li>
<li>电梯最多搭载6人。</li>
<li>电梯不能飞速运行，比如电梯不能在小于0.4秒的时间内移动一层楼。</li>
<li>电梯总运行时间不能比课程组的标准运行时间（<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="3.669ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 1621.6 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></g></g></svg></mjx-container>）长太久。具体来说，不能比 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.158ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12445.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1979,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2232.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3233,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(4233,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4622,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5066.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(5455.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(7455.9,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(8456.1,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g><g data-mml-node="mo" transform="translate(10077.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></svg></mjx-container> 长（单位：秒）</li>
<li>关门后才能开门，开门后才能关门。</li>
<li>符合客观事实，比如不能开着门上下移动，不能让人不乘电梯瞬移到目标楼层之类的。具体要求见指导书。</li>
</ol>
<h5 id="性能评判"><a href="#性能评判" class="headerlink" title="性能评判"></a>性能评判</h5><p>课程组提供了较为复杂的评估标准，不太容易懂。简单来说就是满足以下几点要求：</p>
<ol>
<li>不要让系统运行影响电梯运行时间。（系统要快）</li>
<li>不要让一个人等太久。（等待时间只按电梯到抵达目标楼层的时间）（乘客要爽）</li>
<li>不要让电梯无效运行。（电费要少）</li>
</ol>
<h3 id="第六次作业"><a href="#第六次作业" class="headerlink" title="第六次作业"></a>第六次作业</h3><h4 id="1-题目背景-1"><a href="#1-题目背景-1" class="headerlink" title="1. 题目背景"></a>1. 题目背景</h4><p>只叙述有改动的地方：</p>
<ol>
<li>每个人不再制定电梯。</li>
<li>每个人可以被调度器分配到任何一个电梯，分配后除非重置，否则不可更改。</li>
<li>电梯在把分配到自己的乘客全部运送完之后，除非有新的乘客再被分配进来，否则不应该再移动（移动会判错）。</li>
<li>乘客在被分配到电梯后应该输出<code>RECEIVE</code>语句，也就是要输出一些东西表明乘客分配到了这部电梯。</li>
<li>电梯支持<code>RESET</code>命令，<code>RESET</code>通过标准输入输入进来，电梯必须在5s内响应<code>RESET</code>请求，并且在这5s中最多移动两层楼（输出两次<code>ARRIVE</code>）。响应<code>RESET</code>请求的标志为输出<code>RESET_BEGIN</code>语句。</li>
<li><code>RESET</code>需要1.2s完成，并在完成时输出<code>RESET_END</code>语句表明<code>RESET</code>完成。</li>
<li><code>RESET</code>是用于设置电梯的新的运行状态的，这包括移动一层楼的速度和满载人数。</li>
<li><code>RESET</code>期间电梯里不能有人（可能需要踢人），<code>RESET</code>要在关门时才能<code>RESET</code>。</li>
<li><code>RESET</code>期间电梯不能接受新乘客。</li>
<li>先前被电梯接到的人在该电梯<code>RESET</code>后需要重新<code>RECEIVE</code>，当然这也意味着电梯<code>RESET</code>后可以原本的乘客可以不再坐这部电梯。</li>
</ol>
<h4 id="2-评价标准-1"><a href="#2-评价标准-1" class="headerlink" title="2. 评价标准"></a>2. 评价标准</h4><p>和上次作业几乎完全相同。</p>
<h3 id="第七次作业"><a href="#第七次作业" class="headerlink" title="第七次作业"></a>第七次作业</h3><h4 id="1-题目背景-2"><a href="#1-题目背景-2" class="headerlink" title="1. 题目背景"></a>1. 题目背景</h4><p>只叙述有改动的地方：</p>
<ol>
<li>增加双轿厢电梯。电梯初始默认单轿厢电梯，接受第二类<code>RESET</code>后转变为双轿厢电梯。</li>
<li>增加第二类<code>RESET</code>请求，用于将电梯重置为双轿厢电梯，<code>RESET</code>用时1.2s。相当于把单轿厢拆掉新建了一个双轿厢电梯。第二类<code>RESET</code>请求包括双轿厢电梯的换乘楼层、移动速度、最大人数等。</li>
<li>双轿厢在没有收到<code>RECEIVE</code>请求时仍然可以移动。</li>
<li>双轿厢分为下层轿厢<code>轿厢A</code>和上层轿厢<code>轿厢B</code>，<code>轿厢A</code>只能在换乘楼层及其下方楼层移动，<code>轿厢B</code>只能在换乘楼层及其上方楼层移动。</li>
<li>电梯在重置为双轿厢电梯后，<code>轿厢A</code>默认在换乘楼层的下面一层，<code>轿厢B</code>默认在换乘楼层的上面一层，</li>
<li>双轿厢电梯不接受<code>RESET</code>。输入保证不会出现这种情况。</li>
<li>显然，双轿厢电梯不能Crush。换乘楼层同时只能有一部电梯。</li>
<li>乘客只要离开轿厢（输出<code>OUT</code>）就需要重新<code>RECEIVE</code>。</li>
</ol>
<h4 id="2-评价标准-2"><a href="#2-评价标准-2" class="headerlink" title="2. 评价标准"></a>2. 评价标准</h4><ol>
<li>双轿厢电梯的耗电量是正常电梯的1/4。这无疑增加了影子电梯的编写难度。</li>
</ol>
<h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><p>具体的代码设计架构在第四部分。不想看解题思路的可以跳过。</p>
<h3 id="第五次作业-1"><a href="#第五次作业-1" class="headerlink" title="第五次作业"></a>第五次作业</h3><h4 id="1-我们有哪些需求？"><a href="#1-我们有哪些需求？" class="headerlink" title="1. 我们有哪些需求？"></a>1. 我们有哪些需求？</h4><p>纵观题目，我们可以得出一个简单的结构设计：</p>
<ol>
<li>对于人来说：输入→分配到电梯→等电梯→搭电梯→出来</li>
<li>对于电梯来说：读等待的人→决定要不要接他→接/不接→送客</li>
</ol>
<p>所以基本上，我们需要有这么几个类：</p>
<ol>
<li><code>InputThread</code> 输入线程 - 采购</li>
<li><code>Schedule</code> 分配线程 - 把人分给电梯吃</li>
<li><code>Elevator</code> 电梯线程 - 吃人吐人</li>
<li><code>Client</code> 顾客类 - 人<br>然后，我们接着模块化，简化对象但是增加对象数量：</li>
<li><code>RequestQueue</code> 请求队列 - 采购但是没有被分配的人</li>
<li><code>WaitQueue</code> 等待队列 - 分配但是没有被电梯吃掉的人</li>
<li><code>Strategies</code> 策略类 - 决定电梯先吃哪个人<br>剩余的类不起到决定性效果，只是起了一点辅助作用，在此不在列举。</li>
</ol>
<h4 id="2-我们需要哪些线程？"><a href="#2-我们需要哪些线程？" class="headerlink" title="2. 我们需要哪些线程？"></a>2. 我们需要哪些线程？</h4><p>先理一理要求和思路：</p>
<ol>
<li>首先毫无疑问，我们需要<strong>1个输入线程</strong>。</li>
<li>六部电梯需要单独运行，因此需要一个<strong>6个电梯运行线程</strong>。</li>
<li>但是考虑到之后的作业，我们应该需要一个调度器，用于将乘客分配给不同的电梯。因此我们可以再新建<strong>1个调度器线程</strong>。</li>
<li>我们希望电梯开关门期间可以进入新乘客，而不是<code>sleep(200)</code>休眠200毫秒。考虑到休眠期间电梯是不会进行输入的，我们可以再新建<strong>6个电梯管理线程</strong>。</li>
<li>经过实践，我发现第四点思考难以实现也并不必要。直接删掉。</li>
<li>总结一下，<strong>1个输入，1个调度，6个电梯</strong>。</li>
</ol>
<h4 id="3-线程与线程之间的关系如何（生产-消费模式）？"><a href="#3-线程与线程之间的关系如何（生产-消费模式）？" class="headerlink" title="3. 线程与线程之间的关系如何（生产-消费模式）？"></a>3. 线程与线程之间的关系如何（生产-消费模式）？</h4><p>这是一个很奇怪的问题，在吃了苦头之前我甚至都没有问过自己这个问题。</p>
<p>电梯单元采用的多线程设计模式比较简单，即生产-消费模式。在我的设计中，生产消费关系有俩：输入和调度、调度和电梯。</p>
<h6 id="1-输入线程和调度线程"><a href="#1-输入线程和调度线程" class="headerlink" title="(1) 输入线程和调度线程"></a>(1) 输入线程和调度线程</h6><p>输入进来的乘客需要交给调度线程，由调度线程经过合适的调度策略（在这次作业中，调度策略就是把乘客调度到它指定的电梯）交给电梯。因此输入和调度线程构成生产-消费关系：输入不断生产客户，调度器不断消费客户。而存放生产出来的产品的地方正是<code>RequestQueue</code>类。</p>
<h6 id="2-调度线程和电梯线程"><a href="#2-调度线程和电梯线程" class="headerlink" title="(2) 调度线程和电梯线程"></a>(2) 调度线程和电梯线程</h6><p>调度器会将自己得到的客户交给电梯，由电梯进行消费。从输入进来的顾客会在输出后被释放，因此到这里为止搭乘电梯的顾客构成的供应链就到达链的末尾了。存放生产出来的客户的是我们的<code>WaitQueue</code>类，也就是在指定电梯面前等待的客户构成的集合。这样的集合一共有六个，每个电梯各一个。</p>
<h4 id="4-什么是锁？什么是同步方法？"><a href="#4-什么是锁？什么是同步方法？" class="headerlink" title="4. 什么是锁？什么是同步方法？"></a>4. 什么是锁？什么是同步方法？</h4><p>写这个板块纯粹是因为我在<code>synchronized</code>方法上吃了苦头。总结起来我最开始不理解的地方大概就只有这么几点：</p>
<ol>
<li>每一个<code>synchronized</code>部分一次只能由一个获得了指定锁的线程运行。这种指定的锁只有一把，当这个线程在运行的时候它就占有了锁，其他线程必定就没有占有锁，因此其他线程必定无法运行。</li>
<li>每一个<code>synchronized</code>锁就是一个对象。同步方法的锁就是这个同步方法所处的对象本身。静态同步方法锁的是类对象本身，简单理解就是这整个类的所有静态同步方法共同竞争的一把锁，它不会影响非静态同步方法。</li>
<li><strong>没事别吃饱了撑的把所有方法都锁上。</strong> 只有线程与线程产生竞争的部分需要上锁。竞争的部分是设计决定的，适当地将方法设置为private方法或许是一个好的选择。</li>
<li>原则上同步方法都应该在交出锁之前<code>notify</code>，<strong>但是有一个情况例外</strong>：就是这个同步方法是被另一个同步方法调用的。这时这个同步方法哪怕结束了，锁也不会被释放。这时不需要<code>notify</code>，否则就轮询了。</li>
<li><strong>同一对象的同步方法调用该对象的同步方法是不会死锁的。</strong> 运行父方法就会得到这个对象的锁，而在调用叶方法的时候父方法会发现已经有锁了，于是大胆进入叶方法里头。</li>
<li><strong>在生产-消费模型中，基本上只有涉及到共享数据对象的时候才会出现同步方法。</strong> 其他时候不怎么使用也不需要过多担心，否则可能就要狠狠担心一下了。</li>
</ol>
<h4 id="5-电梯运行策略"><a href="#5-电梯运行策略" class="headerlink" title="5. 电梯运行策略"></a>5. 电梯运行策略</h4><p>详细见第五部分“五、调度策略选择”</p>
<h3 id="第六次作业-1"><a href="#第六次作业-1" class="headerlink" title="第六次作业"></a>第六次作业</h3><h4 id="1-有哪些改动？"><a href="#1-有哪些改动？" class="headerlink" title="1. 有哪些改动？"></a>1. 有哪些改动？</h4><p>第六次作业的主要改动有两个方面：一个是<code>RESET</code>，一个是乘客不知道进哪个电梯，需要调度器去调度乘客。</p>
<p>我们来分析一下我们现在的线程情况。</p>
<p>首先，一个输入线程，一个调度器线程，六个电梯线程，这八个线程应该是没得跑了。六个电梯显示关系实在是太复杂了，我们先考虑一个电梯，也就是先考虑3个线程先。（直觉告诉我们，六个电梯彼此应该没有太多的关系。）</p>
<pre class="mermaid">graph TD
in(输入)
sch(调度器)
ele(电梯)</pre>

<p>然后检查一下这三个线程的关系：</p>
<pre class="mermaid">graph LR
in(输入)
sch(调度器)
ele(电梯)
wq(等待队列)
rq(请求/输入队列)
rs(重置信号队列)

in --&gt; rq --&gt; sch
in --&gt; rs --&gt; ele
sch --&gt; wq --&gt; ele
ele --&gt; rq</pre>

<p>其中，箭头表示生产-消费传递链。然后可以分离出电梯这个模块：</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">	                                +------------------+</span><br><span class="line">									|   **Elevator**   |</span><br><span class="line">									+------------------+</span><br><span class="line">   +--------------------------------|--&gt; ResetQueue    |</span><br><span class="line">   |                                |                  |</span><br><span class="line">Input            +--&gt; Scheduler ----|--&gt; WaitQueue     |</span><br><span class="line">   |             |                  |                  |</span><br><span class="line">   +--&gt; RequestQueue &lt;--------------|--- KickOut       |</span><br><span class="line">                                    +------------------+</span><br></pre></td></tr></table></figure></div>

<h4 id="2-线程终止条件"><a href="#2-线程终止条件" class="headerlink" title="2. 线程终止条件"></a>2. 线程终止条件</h4><p>和第五次作业不同，第六次作业中电梯不再只是消费者：被电梯踢出来的乘客会重新进入调度器接受调度，因此电梯在某种意义上也是生产者。</p>
<p><strong>生产和消费构成的闭环会导致一个问题：电梯和调度器线程根本停不下来！</strong> 调度器需要查看<code>RequestQueue</code>判断是否停止：如果<code>RequestQueue</code>为空并且结束了就把电梯也停下来。<code>RequestQueue</code>的结束是依赖于电梯线程的，电梯线程只要不停，<code>RequestQueue</code>就停不下来，调度器也停不下来，进而电梯也停不下来，使得程序无法结束运行。</p>
<p>为什么会出现这种情况呢？因为在闭环中只查看线程之间存放乘客的共享对象，是无法给生产消费链画上终止符号的。我们需要更多信息。对于调度器线程来说，它不仅仅需要知道共享对象的状态，还需要知道电梯线程的状态才行。再调度器得知输入线程结束了之后，调度器线程还需要确认电梯将所有的乘客都送完了才行。</p>
<p><strong>所以解决方案很简单：调度器如果发现输入线程结束了，并且没有人需要调度，并且每个电梯都没有人了，就让所有电梯都停下来，并且自己结束运行。</strong></p>
<h4 id="3-调度器调度策略"><a href="#3-调度器调度策略" class="headerlink" title="3. 调度器调度策略"></a>3. 调度器调度策略</h4><p>详细见第五部分“五、调度策略选择”</p>
<h3 id="第七次作业-1"><a href="#第七次作业-1" class="headerlink" title="第七次作业"></a>第七次作业</h3><h4 id="1-有哪些改动"><a href="#1-有哪些改动" class="headerlink" title="1. 有哪些改动"></a>1. 有哪些改动</h4><p>第七次作业是最后一次重构的机会了！我把握住了，然后写了一tuo…</p>
<p>个人认为第七次作业可能会遇到这些问题：</p>
<ol>
<li>双轿厢电梯和单轿厢电梯一共有三个线程，但是不会同时启用。那么应该由谁来管理这些线程？</li>
<li>如何处理双轿厢电梯在换乘楼层的冲突？</li>
<li>设计单双轿厢电梯，线程之间如何交互？</li>
</ol>
<h4 id="2-谁来管理电梯线程"><a href="#2-谁来管理电梯线程" class="headerlink" title="2. 谁来管理电梯线程"></a>2. 谁来管理电梯线程</h4><p>第七次作业中的电梯线程的管理其实很简单：创建单轿厢电梯、销毁单轿厢电梯、创建双轿厢电梯。所以主要矛盾集中在单双轿厢电梯的切换上。很难让单轿厢电梯创建双轿厢电梯（因为逻辑上很奇怪）所以强烈建议<strong>加入一个中间层来管理所有电梯线程</strong> （<strong>比如<code>H Boy</code>提出的创建电梯井</strong> ） 。线程的创建和销毁都是调用中间层的方法来完成的。</p>
<p>吴老师在第八次课提到了线程池，但是我没有使用过，并不清楚。</p>
<h4 id="3-如何处理双轿厢电梯在换乘楼层的冲突？"><a href="#3-如何处理双轿厢电梯在换乘楼层的冲突？" class="headerlink" title="3. 如何处理双轿厢电梯在换乘楼层的冲突？"></a>3. 如何处理双轿厢电梯在换乘楼层的冲突？</h4><p>换乘楼层就是临界区，临界区应当配备一把锁。进入临界区就要获得锁，否则等待。离开临界区就释放锁。</p>
<h4 id="4-单双轿厢设计如何"><a href="#4-单双轿厢设计如何" class="headerlink" title="4. 单双轿厢设计如何"></a>4. 单双轿厢设计如何</h4><p>见第四部分“四、架构设计和分析 - 第三次作业”。</p>
<h2 id="四、架构设计和分析"><a href="#四、架构设计和分析" class="headerlink" title="四、架构设计和分析"></a>四、架构设计和分析</h2><p>这是代码架构分析，不包含任何解题思路。解题思路请看第三部分“三、解题思路”</p>
<h3 id="第五次作业-2"><a href="#第五次作业-2" class="headerlink" title="第五次作业"></a>第五次作业</h3><h4 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h4><p>第五次架构设计比较简单，实现的功能也比较简单。整体设计从UML协作图中基本可以看的清清楚楚，个人认为没有太多地方需要特别叙述。解题思路</p>
<h5 id="UML协作图"><a href="#UML协作图" class="headerlink" title="UML协作图"></a>UML协作图</h5><p>在网上搜了一圈，感觉协作图（通信图）五花八门。有利用时序图来画协作图的，有我下面这样的，有利用方块表示类的。我认为只要能够说清楚线程之间的写作关系就行，因此我打算在三次作业的协作图中使用下图的形式。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U2/hw5_coouml.png" alt="hw5_coouml"></p>
<p>整体上就是一个生产消费模型，输(gong)入(chang)线程生产乘客，交给调(tao)度(bao)平台调度，最后交(mai)给电梯消费掉。</p>
<h5 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h5><p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U2/hw5_uml.png" alt="hw5_uml"></p>
<h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U2/hw5_method.png" alt="hw5_method"></p>
<p>所有圈复杂度较高的方法我都看了一圈，事实就是<strong>if-else及其嵌套太多</strong>，用于各种条件判断。每一个if-else里面的内容就两行：一行设置下一个状态，一行return。我当然可以拆开这些if-else，然后把每一次嵌套都封装成一个私有方法，但是我并不认为这会让可读性变高，反而可能会过度封装。此外可以发现，<strong>复杂度过高的方法其实都被私有化了</strong>。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U2/hw5_class.png" alt="hw5_class"></p>
<p>我承认Strategies类写的确实不太好，不过我已经不知道怎么优化了。至于Elevator类和WaitQueue类我倒是不是很担心，我在写一个类的时候会根据外界需求在里面封装好许多好用的方法，哪怕这些方法可能并不会用到，就有点像自己搓一个小的库一样吧。这使得方法复杂度很高，但是实际上既不影响可读性，我也不认为与封装的思想相矛盾。在之后的作业中我沿用了这个类，导致复杂度一直降不下来。</p>
<p>另一方面，<strong>由于我设置了UP和DOWN两个状态，导致几乎所有和上与下有关的代码都会高度相似、对称</strong>。后面我了解到原来枚举类型也是可以设置方法的，这样子我或许可以将这部分代码简化不少。</p>
<h3 id="第六次作业-2"><a href="#第六次作业-2" class="headerlink" title="第六次作业"></a>第六次作业</h3><p>整体上分了三类线程类和三类共享对象，具体如下图所示。个人认为整体还是比较清晰的。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U2/hw6_coouml.png" alt="hw6_coouml"></p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U2/hw6_method.png" alt="hw6_method"></p>
<p>仍然是策略类的方法复杂度过高，过高原因同第五次作业相同：单纯因为需要很多的条件判断。但是整体上可读性还是蛮高的：各种<code>if-else</code>判断整体来说看得还是比较清楚的。</p>
<p>其次复杂的事<code>Elevator</code>类中的<code>actWait()</code>和<code>run()</code>方法。<code>actWait()</code>由于设计遗留的历史原因，他和<code>run()</code>方法其实有一部分代码高度相似。<strong>当时在写的时候想了半天没有想明白应该怎么设计多线程的终止条件，于是写了一个很复杂的终止条件判断</strong>，最后结果是放在<code>Elevator.run()</code>也觉得怪，放在<code>actWait()</code>中也觉得怪，所以就把两边的代码都保留了。实际上终止条件并没有这么复杂，不过我在写完第三次作业之前都不知道要怎么设计，算是一个小遗憾吧。</p>
<p><code>SchStrategy</code> 的 <code>onTheWay()</code> 方法由于时间问题，虽然写了但是没有启用，姑且不认为它复杂。<code>TestMain</code>是用于测试的代码，未提交至平台上。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U2/hw6_class.png" alt="hw6_class"></p>
<p><code>WaitQueue</code>的复杂度来源于各种不同限制条件下的查询和检索：查询高于某一楼层的希望向上走的乘客、查询该层楼下所有向下的乘客等等。每个方法并不复杂，但是由于方法实在太多，复杂度不得不上来。</p>
<p><code>Elevator</code>类的主要复杂度就是上面提到的几个复杂度较高的方法。删去后方法复杂度马上降下来了。</p>
<p><code>EleStrategy</code>的方法复杂度和第五次作业的<code>Strategies</code>复杂度完全一致，不过多叙述。</p>
<h3 id="第七次作业-2"><a href="#第七次作业-2" class="headerlink" title="第七次作业"></a>第七次作业</h3><p>第七次作业的主要改动在于封装了电梯。</p>
<p>在第五次和第六次作业中我一直是让线程对象<strong>直接调用共享对象中的方法</strong>来完成添加乘客，删除乘客等操作。但是后面发现似乎并不一定需要直接调用共享对象的方法，而<strong>可以将共享对象封装到其他对象中</strong>，调用其他对象的方法来完成。</p>
<p>比方说，如果调度器要将乘客加入到电梯中，我们会说：“把这个家伙分配给这个电梯！”而不会说：“把这个乘客放到这个电梯的等待队列中。”对于调度器来说，前者的思想更符合我个人的直觉。</p>
<p>这有什么区别呢？前者我们将电梯的等待队列的概念隐藏了，<strong>电梯对于外界而言没有等待队列的概念，外界只知道自己将一个乘客分配给了这个电梯</strong>。但是后者却将电梯的等待队列暴露了出来。</p>
<p>直接上协作图吧。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U2/hw7_coouml.png" alt="hw7_coouml"></p>
<p>关系个人认为还是很清晰的。主要是添加<code>TrashCarrier</code>现成将电梯完全封装了起来后结构变得十分清晰。</p>
<p>类图则稍微复杂了一点。我删除了所有私有化方法（继承接口是一点不会啊）</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U2/hw7_uml.png" alt="hw7_uml"></p>
<p>从中可以看出虽然加入了<code>Elevator</code>中间层，但是这没有降低多少设计复杂度。单轿厢类、电梯线程类和电梯中间层类应该有更清晰的层次关系，但是当时设计没有想太多，于是就写成这样了。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U2/hw7_method.png" alt="hw7_method"></p>
<p><code>EleStrategy</code>即为先前的<code>Strategy</code>和<code>Strategies</code>类，复杂原因已经在前文中叙述过，在此不再叙述。</p>
<p><code>TestMain</code>是测试的一部分，不属于项目，也不会提交至评测平台。</p>
<p><code>ElevatorThread.run()</code>的主要复杂度来和第六次作业一样，源于结束条件的判断。不过相比第六次作业已经有了很大程度上的降低。</p>
<p><code>Elevator.outputString()</code>是一个用于输出的静态方法。对于单双轿厢电梯，双轿厢的上下层电梯都需要特判后才能进行输出，这导致设计的圈复杂度增加。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U2/hw7_class.png" alt="hw7_class"></p>
<p><code>EleStrategy</code>的复杂度同第六次和第五次作业一致，不再过多叙述。</p>
<p><code>ElevatorThread</code>的复杂度是我没料到的，我坚持认为它不复杂。大概就是：认知复杂度高的方法<code>essential圈复杂度</code>都很低，</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/OO/U2/ElevatorThreadComplexity.png" alt="ElevatorThreadComplexity"></p>
<h2 id="五、调度策略选择"><a href="#五、调度策略选择" class="headerlink" title="五、调度策略选择"></a>五、调度策略选择</h2><p>这一部分是关于具体的调度器调度策略，以及电梯的调度策略的叙述和我的选择。</p>
<p>经过第一单元的淬炼，我想第五次作业应该会有各种各样的神奇策略能够被想出来。但事实就是没人这么干。大多数人使用的都是<code>LOOK</code>策略。这里叙述几种常用的策略和我的选择：</p>
<h3 id="第五次作业-3"><a href="#第五次作业-3" class="headerlink" title="第五次作业"></a>第五次作业</h3><p>第五次作业调度器没有任何调度策略。调度仅发生在单个电梯中</p>
<h4 id="1-ALS调度策略"><a href="#1-ALS调度策略" class="headerlink" title="1. ALS调度策略"></a>1. ALS调度策略</h4><p>我至今也不知道<code>ALS</code>到底是什么的缩写，但是只要在互联网上搜索“ALS调度策略”，我们一定能找到北航计院的身影。</p>
<p><code>ALS</code>的调度策略很简单：</p>
<ol>
<li>电梯有人时，谁先到电梯就先送谁</li>
<li>电梯没人时，去接最早来的人</li>
<li>同向能捎带就捎带<br><code>ALS</code>的缺点很明显：</li>
<li>首先，尽管有主请求的定义，但是当电梯为空的时候，主请求很容易被捎带请求覆盖。因为只要一个空电梯捎带了一个人，那么被捎带的人就是主请求。所以这并不能避免等待时间长的人有更长的等待时间。</li>
<li>主请求容易诱导电梯，让电梯实际上并没有那么公正的策略，而是成为了一个谁手快谁占据更好的位置谁就更容易搭上电梯。</li>
<li>电梯的不公正的接客原则还使得电梯运行路程可能会更长，使得耗电更多。</li>
</ol>
<p><code>ALS</code>代表了一类算法，或者说一类算法的原则：优先接最早到达的人。这是ALS的整体原则，也是我们在设计时可以考虑的原则。</p>
<p>但是<code>ALS</code>并不是那么好。比如：</p>
<blockquote>
<p><strong>Example 1</strong>: 假如有一大波同学1楼到9楼，他们先按了电梯；而有另一波同学想从10楼到1楼，但是他们全部都按晚了电梯。</p>
</blockquote>
<p>根据<code>ALS</code>，他们的请求不会被响应，直到前一波人的请求全部被完成—。当电梯到9楼，电梯宁愿去接最早到的乘客，也就是1楼的乘客，也不愿意接10楼的乘客——哪怕电梯只需要上行一层楼！</p>
<p>事实上，不加改进的<code>ALS</code>策略的实(qiang)际(ce)表现也不佳。这就出现了<code>SCAN</code>策略和<code>LOOK</code>策略。</p>
<h4 id="2-SCAN-LOOK策略"><a href="#2-SCAN-LOOK策略" class="headerlink" title="2. SCAN/LOOK策略"></a>2. SCAN/LOOK策略</h4><p>回想一下我们现在乘坐的电梯，在<code>Example 1</code>中二楼的乘客每次上电梯的时候应该会发现有一大波人从电梯里涌出来。这是因为电梯采用了<code>LOOK</code>策略。在讲<code>LOOK</code>之前，先讲一下<code>SCAN</code>策略。</p>
<p><strong><code>SCAN</code>策略做的事就是在最高层和最底层之间来回扫</strong>。<code>SCAN</code>没有主请求，但是顺带着却能够接到更多人。在<code>Example 1</code>当中，他们会先去接10楼的乘客——不是因为10楼的乘客优先级有多高，只是因为电梯会运行到最高层（11层）再往下运行，而往下运行的时候就正好能够捎带10楼的乘客。</p>
<p>但是11楼是没有必要去的，因为11楼没有人。这就引出了<code>LOOK</code>策略。**<code>LOOK</code>策略意在解决<code>SCAN</code>中的无效运行<strong>。</strong>在<code>LOOK</code>中，我们只需要找到最高和最低的有需求的楼层就行了**：不需要到11楼，而是到10楼就行。</p>
<p>通过这个例子我还想说明一个问题，那就是<strong>只做大优化不做小优化</strong>。当你以为<code>LOOK</code>比<code>SCAN</code>好的时候，请思考这么一件事：如果在<code>LOOK</code>接到十楼的乘客并且开门了打算往下走，这时如果有一个十一楼的乘客刚刚按电梯，那这个十一楼的倒霉蛋就要在等一轮了。也就是说，无用的运行有可能会有用，这取决于具体输入。<strong>不要为一些小细节优化，总是要尝试进行大优化。</strong></p>
<p><code>LOOK</code>策略是一种非常好的策略。在第六次和第七次作业中，由于调度器会将乘客分配给不同电梯，很难出现一个电梯会有很多很多人的情况（数据限制最多100个乘客，平均下来每部电梯不超过17个乘客，很快就能送完）。所以<code>LOOK</code>的弊端再次看来并不会这么明显。</p>
<h4 id="3-LOOK-ALS"><a href="#3-LOOK-ALS" class="headerlink" title="3. LOOK + ALS"></a>3. LOOK + ALS</h4><p><code>LOOK</code>和<code>ALS</code>不仅仅是两个具体策略，他们更反映了两个思想方法或者原则：<strong>一个认为最早来的人最应该先响应，另一个认为我自己走我的路，方便我响应我就响应</strong>。<code>LOOK</code> 原则和 <code>ALS</code> 原则各有优劣：<code>LOOK</code>很容易使某一个人等待时间过长，而<code>ALS</code>可能会对某一些按按钮晚的人很不公平。</p>
<p>这两个原则可以结合一下，取长补短。比方说，<strong>我们可以优先响应同方向上到达时间最早的人，在保证能够接到它的前提下再去捎带其他人</strong>。这样子在一个方向上很难出现等待时间过长的人，进而会更好。</p>
<h4 id="4-我的算法"><a href="#4-我的算法" class="headerlink" title="4. 我的算法"></a>4. 我的算法</h4><p>我认为<code>LOOK + ALS</code>并不足以满足乘客的需求，因为这种算法只能考虑当前情况下等待时间最长的人，却不能考虑当前情况下多个等待时间很长的人。当一个方向上有很多等待时间很长的人的时候，而我们在没有接到他们之前接了其他捎带的人，那么这时候我们很可能就只能接到一个等待时间很长的人，也就是主请求。而其他人等待时间明明也很长，却因为在电梯接到他们之前捎带了其他人，因而无法搭乘电梯。</p>
<p><strong>坏心情算法认为造成这样的原因是因为主请求太少了。</strong> 如果有多个主请求，我们就可以先保证先去接这些主请求，再去考虑是否捎带。</p>
<p><strong>在我的算法中，请求的优先级是根据乘客的心情的好坏来决定的</strong>。我规定，<strong>如果电梯在一次捎带过程中明明可以和我同方向经过了我的楼层却不捎带我，那么我的坏心情就+1，也就是我的优先级在电梯眼中就提高了1级</strong>。<del>这种算法来源于使用新北电梯的真实感受，我把它叫做坏心情算法。</del></p>
<p>坏心情算法解救了<code>LOOK + ALS</code>算法中两个等待时间较长的人可能只能接到一个的问题，实际上如果稍微更改一下坏心情算法，将时间而不是坏心情作为最高优先级，我们就得到了另一种<code>LOOK + ALS</code>算法了。</p>
<p>坏心情算法的缺点也是很明显的：<strong>它几乎完全被坏心情的人带偏了</strong>。如果坏心情的人比较多，并且这些气急败坏的人的请求比较苛刻，那么它们可能会占据电梯的所有位置，导致捎带的人减少，进而导致电梯要花费更长的时间才能够送完所有乘客。</p>
<h4 id="5-LOOK的贪心改进"><a href="#5-LOOK的贪心改进" class="headerlink" title="5. LOOK的贪心改进"></a>5. LOOK的贪心改进</h4><p>方法提出自研讨课同学<code>N Boy</code>。膜！</p>
<p>传统<code>LOOK</code>认为只接同向可捎带的乘客。但是实际上在乘客较少的情况下，<code>LOOK</code>可以两个方向上的乘客都接上，以减少开关门时间。</p>
<h4 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h4><p>没有最好的调度策略，所有的调度策略都有反例，因为未来是未知的，人流量、目的、到达时间就无法纳入考虑因素当中。再退一步讲，即便我们能够知晓未来的一举一动，判断出最佳策略也是困难的。因此经过第五次作业后，我同意指导书的观点，最好的策略就是变换策略。<del>不过真的麻烦死了……</del></p>
<h3 id="第六次作业-3"><a href="#第六次作业-3" class="headerlink" title="第六次作业"></a>第六次作业</h3><p>在第六次作业中，乘客不再指定进入电梯号，而是由同(wan)学(jia)自行调配。因此在第六次作业中有两个策略需要完成：一个是把乘客分配到不同电梯的策略，另一个是电梯接送乘客的策略。由于电梯在没有RECEIVE的时候不能移动，<strong>因此不能让电梯自由竞争乘客</strong>。</p>
<p>第六次作业中的调度策略整体来说大概有这么几种构调度策略/原则：</p>
<h4 id="1-123456"><a href="#1-123456" class="headerlink" title="1. 123456"></a>1. 123456</h4><p>顾名思义，把乘客依次分配给1, 2, …6号电梯。性能十分均衡，性能分也很一般。</p>
<h4 id="2-随机调度原则"><a href="#2-随机调度原则" class="headerlink" title="2. 随机调度原则"></a>2. 随机调度原则</h4><p>随机将乘客分配到不同的电梯。实测随机调度大概能够在强测中获得 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="4.651ex" height="1.819ex" role="img" focusable="false" viewBox="0 -666 2055.8 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1055.8,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container> 的优秀性能分。再在基础上做一些小优化就可以拿到很不错的分数了。</p>
<p>调度的随机性意味着得分的随机性，不清楚课程组会不会反复测试代码然后取平均，但是本地运行多次可能会有不同的效果。乘客量和乘客密度大的时候几乎不会有分数波动。</p>
<h4 id="3-捎带原则"><a href="#3-捎带原则" class="headerlink" title="3. 捎带原则"></a>3. 捎带原则</h4><p>方便捎带就能捎带，结合<code>LOOK</code>类算法可以有不错的性能。不适用于坏心情这一类复杂的算法，理由是很难计算能不能捎带这个人。</p>
<h4 id="4-影子电梯"><a href="#4-影子电梯" class="headerlink" title="4. 影子电梯"></a>4. 影子电梯</h4><p>实际上，根据现有的所有信息，我们是能计算出乘客应该分配到哪一个电梯最好的。我们只需要模拟一遍电梯的运行，算出把乘客分配到哪个电梯更好，然后分配给电梯就行。而且这个分配的时间是由调度器完成的，意味着分配不会占用电梯运行时间。这是最理想的贪心算法。由于模拟过程好似有一个和实际电梯完全一样的电梯在运行，所以称模拟的电梯为影子电梯。</p>
<p>影子电梯的模拟也是分好坏的。优秀的影子电梯可以做到强测 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="4.651ex" height="1.819ex" role="img" focusable="false" viewBox="0 -666 2055.8 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1055.8,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container> 分。</p>
<p>影子电梯也有模拟不到的地方，比如很难将<code>RESET</code>用时考虑进影子电梯中。</p>
<p>单电梯的调度策略和上次一样，<code>LOOK</code>就行。</p>
<h3 id="第七次作业-3"><a href="#第七次作业-3" class="headerlink" title="第七次作业"></a>第七次作业</h3><p>几乎没有变化，本人第七次作业摆大烂。至于调度策略，基本上同第六次和第五次作业。</p>
<h2 id="六、Bug-Debug"><a href="#六、Bug-Debug" class="headerlink" title="六、Bug & Debug"></a>六、Bug &amp; Debug</h2><h3 id="遇到的Bug"><a href="#遇到的Bug" class="headerlink" title="遇到的Bug"></a>遇到的Bug</h3><h4 id="1-电梯的等待队列waitQueue不是线程安全的"><a href="#1-电梯的等待队列waitQueue不是线程安全的" class="headerlink" title="1. 电梯的等待队列waitQueue不是线程安全的"></a>1. 电梯的等待队列waitQueue不是线程安全的</h4><p>解决方案：使用同步方法。</p>
<h4 id="2-电梯为空时无法决定新的方向"><a href="#2-电梯为空时无法决定新的方向" class="headerlink" title="2. 电梯为空时无法决定新的方向"></a>2. 电梯为空时无法决定新的方向</h4><p>解决方案：那就根据<code>LOOK</code>策略选择一个方向。</p>
<h4 id="3-同步方法过多"><a href="#3-同步方法过多" class="headerlink" title="3. 同步方法过多"></a>3. 同步方法过多</h4><p>解决方案：分析线程的关系，只在容易产生冲突的地方进行同步；私有化方法</p>
<h4 id="4-git-commit-–amend使用不熟练"><a href="#4-git-commit-–amend使用不熟练" class="headerlink" title="4. git commit –amend使用不熟练"></a>4. git commit –amend使用不熟练</h4><p>解决方案：自己手动解决冲突就行，应该相当于commit一次再与上一次提交merge。</p>
<h4 id="5-疑似非法提交"><a href="#5-疑似非法提交" class="headerlink" title="5. 疑似非法提交"></a>5. 疑似非法提交</h4><p>我为不同类写了一个debug()方法，但是问题是难以判断调试信息输出的位置。搜索后发现下面这行代码可以打印当前Thread运行位置。评测中检测非法字符串的时候检测到了这一行代码。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Thread.currentThread().getStackTrace(](<span class="number">1</span>].getMethodName())</span><br></pre></td></tr></table></figure></div>

<h4 id="6-RESET和RECEIVE冲突"><a href="#6-RESET和RECEIVE冲突" class="headerlink" title="6. RESET和RECEIVE冲突"></a>6. RESET和RECEIVE冲突</h4><p>这在第六次作业和第七次作业中比较常见。<code>RECEIVE</code>不能再电梯的<code>RESET</code>期间输出，否则错误。第六次作业误打误撞把冲突解决了，导致第七次作业出现这个报错的时候我都不知道原来还有这项要求。</p>
<p>解决方案：加一把锁，<code>RESET</code>期间持有锁，完成<code>RESET</code>后释放。简单来说就是电梯必须在外界看来永远都是在正常运行的。如果在不正常期间运行的话，外界对电梯的访问就会被阻塞住。</p>
<p>注意事项：另一种解决方案是通过查看电梯的运行状态来判断要不要等待，如果电梯在<code>RESET</code>状态就等待，直到被<code>notify()</code>。这样的实现是不稳妥的，很有可能在你查看状态的下一瞬间电梯就完成<code>RESET</code>并且<code>notify()</code>，这样子就查看电梯状态的线程就永远不可能醒过来了。<strong>如果一个线程的运行依赖另一个线程的状态，那么最好用锁。</strong></p>
<h4 id="7-未RESET-BEGIN就重新分配等待队列中的乘客"><a href="#7-未RESET-BEGIN就重新分配等待队列中的乘客" class="headerlink" title="7. 未RESET_BEGIN就重新分配等待队列中的乘客"></a>7. 未RESET_BEGIN就重新分配等待队列中的乘客</h4><p><strong>在<code>RESET_BEGIN</code>之前电梯需要把分配到这部电梯的乘客交给调度器，调度器会调度乘客，乘客会被分给新的电梯并输出<code>RECEIVE</code><strong>。这看起来没什么问题，但是这一切都可能在一瞬间完成，然后下一瞬间电梯才输出<code>RESET_BEGIN</code>！</strong>意味着电梯还没有<code>RESET_BEGIN</code>时，另一个电梯就抢走了原本电梯的乘客！</strong> 第六次和第七次作业不允许出现这样的行为。</p>
<p>解决方案：我的解决方案比较奇葩。我会先让乘客从电梯轿厢中假装出来（输出开关门和出电梯但时在对象的数据中仍然存在于电梯轿厢中），然后输出<code>RESET_BEGIN</code>，再把乘客送给调度器。</p>
<h4 id="8-多产品的生产消费模型"><a href="#8-多产品的生产消费模型" class="headerlink" title="8. 多产品的生产消费模型"></a>8. 多产品的生产消费模型</h4><p>电梯的重置<code>RESET</code>有至少两种实现方式：一种是将<code>RESET</code>作为一种属性写入电梯中，电梯每次切换状态需要查看是否处于需要<code>RESET</code>的状态，需要则<code>RESET</code>。但是如果有多个<code>RESET</code>指令同时涌进来的话，前一条<code>RESET</code>指令就会被覆盖掉，不过由于第六次和第七次作业的约束（同一电梯的两条<code>RESET</code>不能有太近的时间间隔），这种情况几乎不可能发生。</p>
<p>另一种实现方式是将<code>RESET</code>看成另一种产品传递给电梯，构建区别于乘客这种产品的另一条生产-消费供应链。这就产生了多产品的生产消费模型。这给控制设计带来了不少的麻烦（自己写一遍就知道问题了）。</p>
<p>解决方案：让多产品的输入共用一把锁，使用<code>Check-and-Act</code>行为进行设计。</p>
<h4 id="9-停不下来"><a href="#9-停不下来" class="headerlink" title="9. 停不下来"></a>9. 停不下来</h4><p>解决方案：具体停不下来的原因千奇百怪，设置合适的终止条件基本就能停下来了</p>
<h3 id="Debug策略"><a href="#Debug策略" class="headerlink" title="Debug策略"></a>Debug策略</h3><p>多线程<code>Debug</code>是一件麻烦事，不过<code>IDEA</code>帮我们做了不少工作。<code>IDEA</code>中右键断点的红点点可以选择默认多线程<code>Debug</code>，因而在每一个线程运行到这一行代码的时候都能够停下来（不过我倒是很好奇<code>gdb</code>有没有这种功能）。缺点就是实际上运行时不会有线程停下来，所以导致运行和调试可能带来不同。即便如此，<code>Debug</code>还是麻烦的：<code>Debug</code>效率本来就低，现在还要同时在六个电梯线程中打断点，这我真的受不了一点。<strong>所以我直接<code>print</code>大法调试</strong>。我在每一个我需要用到的类里面写了一个<code>debug()</code>方法，用于往终端输出该对象的信息。另外建议将<code>printf</code>大法打印出来的信息直接输出到标准错误输出，因为<code>IDEA</code>中标准错误输出是红色的。</p>
<p><strong>在第六次和第七次作业中我写了一个<code>Debug</code>类（里面全是静态方法），所有的printf函数都是调用Debug类的静态方法完成的</strong>。并且在<code>Debug</code>类中设置了一个参数<code>valid</code>，输出当且仅当<code>valie = true</code>，否则不会输出debug调试信息。</p>
<h2 id="七、心得体会"><a href="#七、心得体会" class="headerlink" title="七、心得体会"></a>七、心得体会</h2><p>首先印象最深的是关于<code>synchronized</code>关键字。<code>synchronized</code>的同步语句块或者同步方法只需要在共享对象上使用，或者更一般地，只需要在多个线程产生访存冲突的地方使用。合适的<code>synchronized</code>可以更好地保证程序的正确性和安全性。在第五次作业中，由于滥用<code>synchronized</code>关键字，我得到了非常糟糕的第五次作业初稿。</p>
<p>此外，这次作业也算是掌握了一些基本的多线程编程的基本思想。生产-消费模型是多线程或者并行编程中的一个最基本的模型，电梯分配属于他们的一个简化版本：没有产品上限，不需要考虑生产消费速度，也几乎不需要考虑某一个电梯闲置时间过长的情况（顶多强测分数低一点）。此外，<code>JAVA</code>提供了非常舒适的多线程编程方法，在其他并行编程模型中不一定会有这么舒适的选项。</p>
<p>最重要的，应该是对多线程有了更深的理解吧。个人感觉这种多线程编程、并行编程的编程方法，在日后的编程学习中应当会有非常好的应用，而且不一定会有机会再接触到了。</p>
<h2 id="八、课程建议"><a href="#八、课程建议" class="headerlink" title="八、课程建议"></a>八、课程建议</h2><p>不知道第三单元和第四单元学些什么，但是第二单元多线程确实蛮有用的，如果后两单元没啥大事的话个人认为其实可以把这一单元延长一点…点。</p>
<p>（好像还是说了很多废话…）</p>
]]></content>
      <categories>
        <category>OO</category>
      </categories>
      <tags>
        <tag>OO</tag>
      </tags>
  </entry>
  <entry>
    <title>About me</title>
    <url>/2023/12/31/about/me/</url>
    <content><![CDATA[<p>现在是2023年12月31号的晚上19:35。距离bilibili跨年晚会的开始还有25分钟，距离2024年还有五个小时不到。2023年是我迈入北航计算机学院的第一年。回顾过去的一学期，我感受过离散数学和量子力学的美丽，也体验了数理统计和随机过程的离奇和神秘；既在面向对象先导课的一次次debug中挣扎，也在计算机组成实验课上一次次死去。</p>
<p>我从来没有想过自己也会有写博客的一天。或许是希望自己同样身为菜鸡能给后来者一点启发，或许是对自己一学期的回顾与复盘，又或许是单纯想找个地方说话，总之一学期下来，我想记录一下我经历的每次不可思议，记录我每一次崩溃和有一次的涅槃。</p>
<p>正当我没处说话的时候，我想起了Roife学长、TobyShi学长和FlyingLandlord学长制作的博客，又正巧在群里刷到了Tan学长的博客。受学长们启发，有了做一篇自己的博客的想法。</p>
<p>希望这篇博客能够坚持到大三，直到我走完北航6系的基本课程。期间可能会换主题和博客的排版，不过希望我能坚持到最后。</p>
<p>感谢每一位身边的人。</p>
<p>现在是2023年12月31号19:56:36，就把这个时间定为一切的开始吧</p>
]]></content>
      <categories>
        <category>me</category>
      </categories>
      <tags>
        <tag>me</tag>
        <tag>talks</tag>
      </tags>
  </entry>
  <entry>
    <title>「BUAA CO」Verilog易错点</title>
    <url>/2024/01/01/CO/verilog_error/</url>
    <content><![CDATA[<p>在P4以及后续的设计过程中，Verilog的语法不过关可能会带来十分糟糕的体验，因此列出了本人犯的错误和舍友们犯的错误。内容仅供参考交流，如有错误，欢迎指正。</p>
<p>Verilog可以在<a class="link"   href="https://hdlbits.01xz.net/wiki/Main_Page" >HDLbits <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>进行练习，也可以参考<a class="link"   href="https://www.runoob.com/w3cnote/verilog-tutorial.html" >菜鸟教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，</p>
<h3 id="1、关于-signed"><a href="#1、关于-signed" class="headerlink" title="1、关于$signed()"></a>1、关于$signed()</h3><p><code>Verilog</code>中默认一切未声明有符号的整型数均为无符号数，并默认有符号数与无符号数运算时，将有符号数自动转化为无符号数。比如：</p>
<div class="highlight-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">wire</span> [<span class="number">3</span> : <span class="number">0</span>] outcome;</span><br><span class="line"><span class="keyword">assign</span> outcome = (opCode == <span class="number">1&#x27;b1</span>) ? <span class="keyword">signed</span>(a) * <span class="keyword">signed</span>(b) : a * b;</span><br></pre></td></tr></table></figure></div>
<p>上述代码中，<code>signed(a) * signed(b)</code>与<code>a*b</code>通过三目运算符进行运算，因此默认将第二位操作数（<code>signed(a) * signed(b)</code>）转换为无符号的乘法。解决方案在官方教程中有提及。</p>
<p>上面这个例子很容易看出问题，但是当运用多重三目运算符进行嵌套的时候，结构复杂，很可能会遗漏有符号数和无符号数的问题。</p>
<p>此外还有一点与C代码不同的是，在<code>Verilog</code>中，不能将“&#x3D;”视为一种运算符。也就是说如果我在某一语句块里这么写：</p>
<div class="highlight-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">  outcome = <span class="built_in">$signed</span>(a) * <span class="built_in">$signed</span>(b);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div>
<p><code>outcome</code>仍然是两个有符号数做乘法的运算结果。<code>=</code>应当和<code>&lt;=</code>视为一种<strong>赋值符</strong>。</p>
<h3 id="2、关于条件运算和浮空"><a href="#2、关于条件运算和浮空" class="headerlink" title="2、关于条件运算和浮空"></a>2、关于条件运算和浮空</h3><p>使用三目运算符时，<strong>当第一位操作数，即条件，为浮空值的时候，表达式返回值也是浮空值。</strong> 比方说:</p>
<div class="highlight-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">wire</span> outcome;</span><br><span class="line"><span class="keyword">assign</span> outcome = (<span class="number">1&#x27;bx</span>) ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>;</span><br></pre></td></tr></table></figure></div>
<p>在上述代码中，<code>outcome</code>会得到1位的浮空值。<code>Verilog</code>不知道条件是真是假，因此无法给出结果。</p>
<p>但是如果这样写：</p>
<div class="highlight-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">wire</span> [<span class="number">1</span> : <span class="number">0</span>] outcome;</span><br><span class="line"><span class="keyword">assign</span> outcome = (<span class="number">1&#x27;bx</span>) ? <span class="number">2&#x27;b01</span> : <span class="number">2&#x27;b00</span>;</span><br></pre></td></tr></table></figure></div>
<p><code>outcome</code>就会得到<code>2&#39;b0x</code>的值，理由是尽管<code>Verilog</code>不知道结果是第二个操作数还是第三个操作数，但是不论是哪一个，其第1位一定是0，但是无法确定其第0位究竟是0还是1，因此第0位浮空。</p>
<p>在<code>if-else</code>语句中则不一样。比如：</p>
<div class="highlight-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (a == <span class="number">1&#x27;b1</span>) </span><br><span class="line">  b &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">  b &lt;= <span class="number">1&#x27;b0</span>;</span><br></pre></td></tr></table></figure></div>
<p>在上述代码中，如果<code>a</code>为一位浮空值，程序仍然会执行<code>else</code>语句块内的代码。<code>if-else</code>是安全的。</p>
<p>在一些情况下，我们希望判断语句能够更加保险，即能够对浮空值也进行判断。这是可以使用<code>===</code>和<code>!===</code>，这双目两个运算符可以连同高阻态<code>z</code>和浮空值<code>x</code>一并进行判断。</p>
<p>三目运算符在进行简单的<code>if-else</code>判断是非常好用的，主要是写起来和读起来都比较舒服。但是不建议用于多重<code>if-else</code>判断，尤其是当不论<code>if</code>还是<code>else</code>里面都有<code>if-else</code>语句的时候。</p>
<h3 id="3、关于”-”和”-”以及“自动类型转换”"><a href="#3、关于”-”和”-”以及“自动类型转换”" class="headerlink" title="3、关于”~”和”!”以及“自动类型转换”"></a>3、关于”~”和”!”以及“自动类型转换”</h3><p>省流版就是：不要用位宽不同的两个数进行相互赋值，理由是<code>Verilog</code>在进行位扩展的时候会进行一些很诡异的操作。</p>
<p>下面讲一个具体的例子。下例由室友LJC提出，愣是把我看傻了。</p>
<div class="highlight-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> test(</span><br><span class="line">);</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">1</span> : <span class="number">0</span>] a;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">3</span> : <span class="number">0</span>] c;</span><br><span class="line">    <span class="keyword">reg</span> clk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">            c = ~a;</span><br><span class="line">            <span class="built_in">$display</span>(<span class="string">&quot;when a = 1&#x27;b%b, c = ~ a = 4&#x27;b%b&quot;</span>, a, c);</span><br><span class="line">            c = !a;</span><br><span class="line">            <span class="built_in">$display</span>(<span class="string">&quot;when a = 1&#x27;b%b, c = ! a = 4&#x27;b%b&quot;</span>, a, c);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        a = <span class="number">2&#x27;b00</span>;</span><br><span class="line">        c = <span class="number">4&#x27;b00</span>;</span><br><span class="line">        clk = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        #<span class="number">2</span> a = <span class="number">2&#x27;b01</span>;</span><br><span class="line">        #<span class="number">2</span> a = <span class="number">2&#x27;b10</span>;</span><br><span class="line">        #<span class="number">2</span> a = <span class="number">2&#x27;b11</span>;</span><br><span class="line">        #<span class="number">2</span> <span class="built_in">$finish</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> #<span class="number">1</span> clk &lt;= ~clk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div>
<p>使用<code>iverilog</code>进行编译和仿真会得到：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ iverilog -o a.out test.v</span><br><span class="line">$ vvp a.out</span><br><span class="line">when a = 1&#x27;b00, c = ~ a = 4&#x27;b1111</span><br><span class="line">when a = 1&#x27;b00, c = ! a = 4&#x27;b0001</span><br><span class="line">when a = 1&#x27;b01, c = ~ a = 4&#x27;b1110</span><br><span class="line">when a = 1&#x27;b01, c = ! a = 4&#x27;b0000</span><br><span class="line">when a = 1&#x27;b10, c = ~ a = 4&#x27;b1101</span><br><span class="line">when a = 1&#x27;b10, c = ! a = 4&#x27;b0000</span><br><span class="line">when a = 1&#x27;b11, c = ~ a = 4&#x27;b1100</span><br><span class="line">when a = 1&#x27;b11, c = ! a = 4&#x27;b0000</span><br><span class="line">test3.v:23: $finish called at 8 (1s)</span><br></pre></td></tr></table></figure></div>
<p>可以看出，<code>~a</code>和<code>!a</code>在进行位扩展时十分抽象，编译时会先进行1扩展或者0扩展再进行赋值。因此当一个稍微复杂的表达式中出现了位宽的改变时，强烈建议用<code>vector</code>也就是花括号<code>&#123;,&#125;</code>手动进行扩展。</p>
<p>P.S.样例中在时序逻辑中进行阻塞赋值是不合规范的，请勿模仿。</p>
<h3 id="4、位宽"><a href="#4、位宽" class="headerlink" title="4、位宽"></a>4、位宽</h3><p>下例来自舍友ZHX，这种事情一旦发生，debug可就困难了。大家可以试着找找下图中的错误。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/CO/verilog_error/1.png"
                      alt="位宽错误"
                ></p>
<details class="blue" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>Answer </summary>
              <div class='content'>
              <p>不声明位宽时，默认1位。这与整数不同，后者默认32位。<br>Addr是32位的地址，但是声明成了1位。 </p>
              </div>
            </details>

<h3 id="5、关于循环"><a href="#5、关于循环" class="headerlink" title="5、关于循环"></a>5、关于循环</h3><p>在P4以及后续的上机题中，可能会需要统计一个32位数中的1的个数，或者32位数中是否存在连续的4个1。这时需要使用循环写组合逻辑。比如前者可写为：</p>
<div class="highlight-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">integer</span> i;</span><br><span class="line"><span class="keyword">reg</span>  [<span class="number">31</span>: <span class="number">0</span>] sum;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>: <span class="number">0</span>] target;</span><br><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">  sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i=i+<span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">    sum = sum + target[i];</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div>

<h3 id="6、关于切片"><a href="#6、关于切片" class="headerlink" title="6、关于切片"></a>6、关于切片</h3><p>对于<code>wire</code>类型或者<code>reg</code>类型变量，我们会经常用到<code>[:]</code>取出特定位宽，再利用<code>&#123;,&#125;</code>进行拼接。但是当我们想取出的位置随变量改变时，就会出现问题，比如：</p>
<div class="highlight-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> test(</span><br><span class="line">);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">integer</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">3</span> : <span class="number">0</span>] c;</span><br><span class="line"><span class="keyword">assign</span> c = c[(i + <span class="number">1</span>):i]</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></div>
<p>用<code>iverilog</code>编译会报错。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">test.v:6: error: Part select expressions must be constant.</span><br></pre></td></tr></table></figure></div>
<p>个人猜测Verilog要求返回值的位宽必须是恒定的，因此要求用常数选择位宽。</p>
<p>解决方案有三。第一个是利用位移运算去挪它，再用常数选出来；第二个是用vector把每一位取出来并进行拼接，如<code>assign c = &#123;&#123;c[i+1]&#125;, &#123;c[i]&#125;&#125;;</code>。</p>
<p>第三个方案更简洁，利用System Verilog中的切片完成。比如上述例子可写成：</p>
<div class="highlight-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>     <span class="keyword">module</span> test(</span><br><span class="line"><span class="number">2</span>     );</span><br><span class="line">...</span><br><span class="line"><span class="number">12</span>    <span class="keyword">integer</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="number">13</span>    <span class="keyword">wire</span> [<span class="number">3</span> : <span class="number">0</span>] c;</span><br><span class="line"><span class="number">14</span>    <span class="keyword">assign</span> c = c[(i + <span class="number">1</span>) -: <span class="number">2</span>]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<p>不要用<code>[i+:2]</code>，这会返回<code>[i:i+1]</code>。</p>
<h3 id="7、关于阻塞和非阻塞"><a href="#7、关于阻塞和非阻塞" class="headerlink" title="7、关于阻塞和非阻塞"></a>7、关于阻塞和非阻塞</h3><p>阻塞赋值和非阻塞赋值看似简单，但实际上在编译过程中又不是那么简单。个人建议将阻塞赋值和非阻塞赋值分开，即在<code>always @(*)</code>中进行阻塞赋值，在<code>always @(posedge clk)</code>中进行非阻塞赋值。请不要在阻塞赋值中掺杂非阻塞赋值。比如我的天才构思，实现了在时钟上升沿的瞬间利用上升沿后的数据对寄存器值进行更新：</p>
<div class="highlight-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// process coming data...</span></span><br><span class="line">    flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> flag) <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">// do sth...</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div>
<p>我不知道第一个语句块中是否真的读到了上升沿后的数据，因为仿真得到的全是浮空值。</p>
<p>非阻塞赋值是在利用上升沿之前的数据在上升沿对寄存器进行一次更新，所以请不要在同一个上升沿对同一个寄存器更新两次，即不要在同一次<code>always</code>中执行多次对同一个<code>reg</code>类型变量的非阻塞赋值操作。如果需要用上升沿之后的数据输出的话，可以写一个Mealy机。</p>
<p>待补充~</p>
]]></content>
      <categories>
        <category>CO</category>
      </categories>
      <tags>
        <tag>Verilog</tag>
      </tags>
  </entry>
</search>
